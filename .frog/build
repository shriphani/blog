((3) 0 () 42 ((p+ #"/Users/shriphani/blog/_src/posts/2014-05-21-visualizing-the-most-powerful-brands-by-industry.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-12-26-the-sistine-chapel.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-05-31-disco-rectangles.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-05-28-gianni-agnelli.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-02-14-clojure-scraping-overview.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-03-13-heritrix-tutorial.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-08-31-the-rothko.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-09-21-lsh-implementation-for-sketchy.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-06-09-disco-dora-maar.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-07-13-new-blog.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-07-13-fast-dates-parser.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-12-18-recovering-background-matrices.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-01-11-all-it-took-was.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-11-22-obituary.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-04-20-watch-date-change-mechanism.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-04-13-consistent-hashing-in-clojure.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-06-23-subotai-data-mining-for-html-documents.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-09-21-obituary-mandolin-srinivas.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-04-12-fertitlity-rates-and-prosperity.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-04-05-clojure-java-string-trim.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-11-29-a-comment-on-dimension-estimation.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-11-27-the-story-of-phineas-gage.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-07-21-record-extraction-and-timestamps.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-05-16-augmenting-enlive.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-05-07-the-medical-ir-paradox.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-05-18-wikipedia-server-requests-by-the-hour.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-02-18-clojure-blekko-api.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-03-17-the-tw-idf-model.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-10-13-using-macros-to-implement-a-protocol.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-10-15-crawler-dos-donts.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-07-21-pittsburgh-vintage-grand-prix-italian-cars.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-07-21-accessing-your-kindle-highlights.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-07-22-the-percolator-paper.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-08-18-on-carrots-sticks-and-the-internet.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-08-16-on-empires.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-08-21-faster-tree-edit-distance.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-08-27-racket-whistlepig-bindings.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-08-16-clueweb12-status-report.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-12-13-probabilistic-counting.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-12-09-tree-edit-distance-enlive-version.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2013-12-03-tree-edit-distance-in-clojure.md" . unix) (p+ #"/Users/shriphani/blog/_src/posts/2014-09-24-enlive-selectors-xpaths.md" . unix)) () (h ! (equal) ((p+ #"/Users/shriphani/blog/_src/posts/2014-09-21-lsh-implementation-for-sketchy.md" . unix) f post (u . "LSH Implementation for Sketchy") (? . 7) 1411332556 (p+ #"/Users/shriphani/blog/2014/09/21/lsh-implementation-for-sketchy/index.html" . unix) "/2014/09/21/lsh-implementation-for-sketchy/" (u . "2014-09-21T13:09:20") (? . 6) (? . 17) (c (u . "clojure") c (u . "big-data") c (u . "lsh") c (u . "locality-sensitive-hashing") c (u . "nearest-neighbor")) (u . "\n<p>The Sketchy library implements a few hashing algorithms. I recently submitted a pull-request that implements locality sensitive hashing - a well-studied technique that can be used to speed up Nearest Neighbor queries.</p>") #t (u . "\n<p>The Sketchy library implements a few hashing algorithms. I recently submitted a pull-request that implements locality sensitive hashing - a well-studied technique that can be used to speed up Nearest Neighbor queries.</p>\n<!-- more-->")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-04-13-consistent-hashing-in-clojure.md" . unix) f post (u . "Consistent Hashing in Clojure") (? . 15) 1399001488 (p+ #"/Users/shriphani/blog/2014/05/01/consistent-hashing-in-clojure/index.html" . unix) "/2014/05/01/consistent-hashing-in-clojure/" (u . "2014-05-01T19:31:35") (? . 14) (? . 24) (c (u . "clojure") c (u . "consistent-hashing") c (u . "hotspots")) (u . "\n<p>I wrote this post to teach myself consistent hashing - a simple hash family that Akamai&rsquo;s founders came up with. This was originally done to prepare for a talk in my grad algorithms class (I made a horlicks of the talk but whatever). I am going to provide intuition, analysis and a clojure implementation.</p>") #t (u . "\n<p>I wrote this post to teach myself consistent hashing - a simple hash family that Akamai&rsquo;s founders came up with. This was originally done to prepare for a talk in my grad algorithms class (I made a horlicks of the talk but whatever). I am going to provide intuition, analysis and a clojure implementation.</p>\n<!-- more-->\n\n<h2 id=\"the-problem-setting\">The Problem Setting</h2>\n\n<p>A server contains viral resources (frequently hit webpages) and is swamped with requests. The obvious solution is to replicate this page using a set of caches (a set because a single cache can be overwhelmed by the same traffic surge) and after a cache miss, we send the request to the server.</p>\n\n<p>We employ consistent hashing to assign and retrieve resources from these caches.</p>\n\n<p>The set of caches is not fixed and even the set of caches a client can observe is not fixed. So one would like to be at the sweet spot of redundancy and uniformity (i.e. an even distribution of items among caches). Add to this, the requirement that we cannot predict a traffic surge.</p>\n\n<p>The natural solution is thus to use hashing to determine which cache to use to store a resource (or which cache to retrieve a resource from). A traditional hash function of the type $ (ax + b) \\% p $ is a poor choice since anytime $ p $ changes (which is quite often), the entire assignment of resources changes and we are stuck with a massive reassignment overhead.</p>\n\n<p>Consistent hashing achieves all these properties and has the added advantage of being quite simple.</p>\n\n<p>Anywho the operations are:</p>\n\n<ul>\n <li>\n  <p>Get a circle of circumference 1.</p></li>\n <li>\n  <p>Take your items and map them to some point on this circle (using  something like MD5).</p></li>\n <li>\n  <p>Then take the available caches (i.e. whatever you can see) and map  them to the circle as well.</p></li>\n <li>\n  <p>To assign an item to a cache, start at the item, keep going  clockwise and the first cache you hit is the one you assign the item  to.</p></li></ul>\n\n<p>And that is it! (<a href=\"http://www.tomkleinpeter.com/2008/03/17/programmers-toolbox-part-3-consistent-hashing/\">this blog</a> post has a few good graphics illustrating this algorithm).</p>\n\n<p>Now, I wanted to perform a simulation of this algorithm in clojure to see empirically how good the performance is. I basically simulated 100 assignments. This experiment essentially can be thought of as: 100 caches, 10000 items and the routine that assigns an item to a cache updates its assignment ten times - each time observing a (random) subset of the available caches. This is a distribution of the load:</p>\n\n<p><img src=\"/img/load.gif\" /></p>\n\n<p>Essentially the the size of the circle is an indication of the number of items assigned. A very large circle indicates that a large number of items were mapped to that cache. As you can see, only a few caches have been overloaded with resources (possibly because one of the workers picked up very few caches and mapped a lot of resources to them).</p>\n\n<p>Clearly the empirical evidence shows that the distribution of resources in these caches is really good. Only a few caches out of 100 have an extraordinarily high number of resources assigned to them. That experiment and the displayed gif were generated using code in <a href=\"http://github.com/shriphani/consistent-hashing\">this repo</a>.</p>\n\n<p>In particular, the code for consistent hashing looks like:</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">consistent-hashing.core</span>\n  <span class=\"p\">(</span><span class=\"ss\">:require</span> <span class=\"p\">[</span><span class=\"nv\">digest</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"ss\">:import</span> <span class=\"p\">[</span><span class=\"nv\">java.nio</span> <span class=\"nv\">ByteBuffer</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">items</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">10000</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">caches</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">100</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">map-to-unit-circle</span>\n  <span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">arr</span> <span class=\"p\">(</span><span class=\"nf\">ByteBuffer/allocate</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"nb\">val </span><span class=\"p\">(</span><span class=\"k\">do </span><span class=\"p\">(</span><span class=\"nf\">.putInt</span> <span class=\"nv\">arr</span> <span class=\"nv\">x</span><span class=\"p\">)</span>\n                <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">arr</span>\n                     <span class=\"p\">(</span><span class=\"nf\">.array</span><span class=\"p\">)</span>\n                     <span class=\"nv\">digest/md5</span>\n                     <span class=\"p\">(</span><span class=\"nf\">.getBytes</span><span class=\"p\">)</span>\n                     <span class=\"nv\">bigint</span><span class=\"p\">))]</span>\n    <span class=\"p\">(</span><span class=\"nf\">double</span>\n     <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nb\">rem val </span><span class=\"mi\">100000</span><span class=\"p\">)</span>\n        <span class=\"mi\">100000</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">map-cache-to-unit-circle</span>\n  <span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">val</span>\n        <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">x</span>\n             <span class=\"nv\">str</span>\n             <span class=\"nv\">digest/md5</span>\n             <span class=\"p\">(</span><span class=\"nf\">.getBytes</span><span class=\"p\">)</span>\n             <span class=\"nv\">bigint</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nf\">double</span>\n     <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nb\">rem val </span><span class=\"mi\">100000</span><span class=\"p\">)</span>\n        <span class=\"mi\">100000</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">assign-item</span>\n  <span class=\"p\">[[</span><span class=\"nv\">item</span> <span class=\"nv\">pt</span><span class=\"p\">]</span> <span class=\"nv\">caches-points</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">dsts</span> <span class=\"p\">(</span><span class=\"nf\">sort-by</span>\n              <span class=\"nv\">second</span>\n              <span class=\"p\">(</span><span class=\"nf\">map</span>\n               <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[[</span><span class=\"nv\">c</span> <span class=\"nv\">p</span><span class=\"p\">]]</span>\n                 <span class=\"p\">[</span><span class=\"nv\">c</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">&lt; </span><span class=\"nv\">p</span> <span class=\"nv\">pt</span><span class=\"p\">)</span>\n                      <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">p</span> <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"mi\">1</span> <span class=\"nv\">pt</span><span class=\"p\">))</span>\n                      <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"nv\">p</span> <span class=\"nv\">pt</span><span class=\"p\">))])</span>\n               <span class=\"nv\">caches-points</span><span class=\"p\">))]</span>\n    <span class=\"p\">(</span><span class=\"nf\">first</span>\n     <span class=\"p\">(</span><span class=\"nb\">first </span><span class=\"nv\">dsts</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">assign</span>\n  <span class=\"s\">\"Items: a set of items</span>\n<span class=\"s\">   Caches: a set of caches\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">items</span> <span class=\"nv\">caches</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">mapped-items</span>  <span class=\"p\">(</span><span class=\"nf\">into</span>\n                       <span class=\"p\">{}</span>\n                       <span class=\"p\">(</span><span class=\"nf\">map</span>\n                        <span class=\"nv\">vector</span>\n                        <span class=\"nv\">items</span>\n                        <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">map-to-unit-circle</span> <span class=\"nv\">items</span><span class=\"p\">)))</span>\n        <span class=\"nv\">mapped-caches</span> <span class=\"p\">(</span><span class=\"nf\">sort-by</span>\n                       <span class=\"nv\">second</span>\n                       <span class=\"p\">(</span><span class=\"nf\">map</span>\n                        <span class=\"nv\">vector</span>\n                        <span class=\"nv\">caches</span>\n                        <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">map-cache-to-unit-circle</span> <span class=\"nv\">caches</span><span class=\"p\">)))]</span>\n    <span class=\"p\">(</span><span class=\"nf\">map</span>\n     <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]</span>\n       <span class=\"p\">(</span><span class=\"nf\">assign-item</span> <span class=\"nv\">x</span> <span class=\"nv\">mapped-caches</span><span class=\"p\">))</span>\n     <span class=\"nv\">mapped-items</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">random-take</span>\n  <span class=\"p\">[</span><span class=\"nv\">coll</span> <span class=\"nv\">n</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">coll-set</span> <span class=\"p\">(</span><span class=\"nb\">set </span><span class=\"nv\">coll</span><span class=\"p\">)</span>\n        <span class=\"nv\">item</span> <span class=\"p\">(</span><span class=\"nf\">rand-nth</span> <span class=\"p\">(</span><span class=\"nb\">into </span><span class=\"p\">[]</span> <span class=\"nv\">coll-set</span><span class=\"p\">))]</span>\n    <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">zero? </span><span class=\"nv\">n</span><span class=\"p\">)</span>\n      <span class=\"p\">[]</span>\n      <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"nv\">item</span>\n            <span class=\"p\">(</span><span class=\"nf\">random-take</span> <span class=\"p\">(</span><span class=\"nf\">clojure.set/difference</span> <span class=\"nv\">coll-set</span> <span class=\"p\">(</span><span class=\"nb\">set </span><span class=\"p\">[</span><span class=\"nv\">item</span><span class=\"p\">]))</span>\n                         <span class=\"p\">(</span><span class=\"nb\">dec </span><span class=\"nv\">n</span><span class=\"p\">))))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">simulation</span>\n  <span class=\"p\">[]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">num-assgns</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n    <span class=\"p\">(</span><span class=\"nf\">map</span>\n     <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">i</span><span class=\"p\">]</span>\n       <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">to-take</span> <span class=\"p\">(</span><span class=\"nf\">rand-nth</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">caches</span><span class=\"p\">)))</span>\n             <span class=\"nv\">seen-caches</span> <span class=\"p\">(</span><span class=\"nf\">random-take</span> <span class=\"nv\">caches</span> <span class=\"nv\">to-take</span><span class=\"p\">)]</span>\n         <span class=\"p\">(</span><span class=\"nf\">assign</span> <span class=\"nv\">items</span> <span class=\"nv\">seen-caches</span><span class=\"p\">)))</span>\n     <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"nv\">num-assgns</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And the gif was generated using:</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">consistent-hashing.animate</span>\n  <span class=\"p\">(</span><span class=\"ss\">:require</span> <span class=\"p\">[</span><span class=\"nv\">consistent-hashing.core</span> <span class=\"ss\">:as</span> <span class=\"nv\">core</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"ss\">:import</span> <span class=\"p\">[</span><span class=\"nv\">javax.swing</span> <span class=\"nv\">JFrame</span> <span class=\"nv\">JLabel</span><span class=\"p\">]</span>\n           <span class=\"p\">[</span><span class=\"nv\">java.awt.image</span> <span class=\"nv\">BufferedImage</span><span class=\"p\">]</span>\n           <span class=\"p\">[</span><span class=\"nv\">java.awt</span> <span class=\"nv\">Graphics</span> <span class=\"nv\">Dimension</span> <span class=\"nv\">Color</span><span class=\"p\">]</span>\n           <span class=\"p\">[</span><span class=\"nv\">gifAnimation</span> <span class=\"nv\">GifEncoder</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">paint-canvas</span> <span class=\"p\">[</span><span class=\"nv\">size</span> <span class=\"nv\">graphics</span> <span class=\"nv\">caches</span> <span class=\"nv\">assignment</span><span class=\"p\">]</span>\n\n  <span class=\"c1\">;; draw the unit circle</span>\n  <span class=\"p\">(</span><span class=\"nf\">.setColor</span> <span class=\"nv\">graphics</span> <span class=\"p\">(</span><span class=\"nf\">Color.</span> <span class=\"mi\">255</span> <span class=\"mi\">255</span> <span class=\"mi\">255</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nf\">.fillRect</span> <span class=\"nv\">graphics</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">10</span> <span class=\"nv\">size</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">10</span> <span class=\"nv\">size</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[[</span><span class=\"nv\">c</span> <span class=\"nv\">x</span><span class=\"p\">]</span> <span class=\"nv\">caches</span><span class=\"p\">]</span>\n    <span class=\"p\">(</span><span class=\"nf\">.setColor</span> <span class=\"nv\">graphics</span> <span class=\"p\">(</span><span class=\"nf\">Color.</span> <span class=\"mi\">255</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">when </span><span class=\"p\">(</span><span class=\"nf\">assignment</span> <span class=\"nv\">c</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">diam</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">10</span> <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nf\">assignment</span> <span class=\"nv\">c</span><span class=\"p\">)</span>\n                          <span class=\"mi\">250</span><span class=\"p\">))]</span>\n        <span class=\"p\">(</span><span class=\"nf\">.fillOval</span> <span class=\"nv\">graphics</span>\n                   <span class=\"p\">(</span><span class=\"nf\">+</span>\n                    <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">size</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n                    <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">diam</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n                    <span class=\"p\">(</span><span class=\"nb\">int </span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">size</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">Math/cos</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">x</span>\n                                                    <span class=\"mi\">2</span>\n                                                    <span class=\"nv\">Math/PI</span><span class=\"p\">)))))</span>\n                   <span class=\"p\">(</span><span class=\"nf\">+</span>\n                    <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">size</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n                    <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">diam</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n                    <span class=\"p\">(</span><span class=\"nb\">int </span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">size</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">Math/sin</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">x</span>\n                                                    <span class=\"mi\">2</span>\n                                                    <span class=\"nv\">Math/PI</span><span class=\"p\">)))))</span>\n                   <span class=\"nv\">diam</span>\n                   <span class=\"nv\">diam</span><span class=\"p\">))))</span>\n  <span class=\"p\">(</span><span class=\"nf\">.drawOval</span> <span class=\"nv\">graphics</span>\n             <span class=\"mi\">0</span>\n             <span class=\"mi\">0</span>\n             <span class=\"nv\">size</span>\n             <span class=\"nv\">size</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">draw</span> <span class=\"p\">[</span><span class=\"nv\">size</span> <span class=\"nv\">caches</span> <span class=\"nv\">assignment</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">image</span>  <span class=\"p\">(</span><span class=\"nf\">BufferedImage.</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">10</span> <span class=\"nv\">size</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">10</span> <span class=\"nv\">size</span><span class=\"p\">)</span> <span class=\"nv\">BufferedImage/TYPE_INT_RGB</span><span class=\"p\">)</span>\n        <span class=\"c1\">;; canvas (proxy [JLabel] []</span>\n        <span class=\"c1\">;;          (paint [g] (.drawImage g image 0 0 this)))</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"p\">(</span><span class=\"nf\">paint-canvas</span> <span class=\"nv\">size</span> <span class=\"p\">(</span><span class=\"nf\">.createGraphics</span> <span class=\"nv\">image</span><span class=\"p\">)</span> <span class=\"nv\">caches</span> <span class=\"nv\">assignment</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\">;; (doto (JFrame.)</span>\n    <span class=\"c1\">;;   (.add canvas)</span>\n    <span class=\"c1\">;;   (.setSize (Dimension. (+ 10 size) (+ 10 size)))</span>\n    <span class=\"c1\">;;   (.show))</span>\n    <span class=\"nv\">image</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">animate-load</span>\n  <span class=\"p\">[]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">mapped-items</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">vector</span>\n                          <span class=\"nv\">core/items</span>\n                          <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">core/map-to-unit-circle</span> <span class=\"nv\">core/items</span><span class=\"p\">))</span>\n        <span class=\"nv\">mapped-caches</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">vector</span>\n                           <span class=\"nv\">core/caches</span>\n                           <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">core/map-cache-to-unit-circle</span> <span class=\"nv\">core/caches</span><span class=\"p\">))</span>\n        <span class=\"nv\">simulated</span> <span class=\"p\">(</span><span class=\"nf\">core/simulation</span><span class=\"p\">)</span>\n\n        <span class=\"nv\">load-pics</span> \n        <span class=\"p\">(</span><span class=\"nf\">map</span>\n         <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">xs</span><span class=\"p\">]</span>\n           <span class=\"p\">(</span><span class=\"nf\">reduce</span>\n            <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">acc</span> <span class=\"p\">[</span><span class=\"nv\">c</span> <span class=\"nv\">is</span><span class=\"p\">]]</span>\n              <span class=\"p\">(</span><span class=\"nb\">merge-with </span><span class=\"nv\">+</span><span class=\"o\">&#39;</span> <span class=\"nv\">acc</span> <span class=\"p\">{</span><span class=\"nv\">c</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">is</span><span class=\"p\">)}))</span>\n            <span class=\"p\">{}</span>\n            <span class=\"nv\">xs</span><span class=\"p\">))</span>\n         <span class=\"p\">(</span><span class=\"nf\">reductions</span>\n          <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">acc</span> <span class=\"nv\">x</span><span class=\"p\">]</span>\n            <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">cache-items</span> <span class=\"p\">(</span><span class=\"nf\">reduce</span>\n                               <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">acc</span> <span class=\"p\">[</span><span class=\"nv\">c</span> <span class=\"nv\">is</span><span class=\"p\">]]</span>\n                                 <span class=\"p\">(</span><span class=\"nb\">merge-with </span><span class=\"nv\">clojure.set/union</span> <span class=\"nv\">acc</span> <span class=\"p\">{</span><span class=\"nv\">c</span> <span class=\"p\">(</span><span class=\"nb\">set </span><span class=\"nv\">is</span><span class=\"p\">)}))</span>\n                               <span class=\"p\">{}</span>\n                               <span class=\"p\">(</span><span class=\"nb\">map vector </span><span class=\"nv\">x</span> <span class=\"p\">(</span><span class=\"nb\">map vector </span><span class=\"nv\">core/items</span><span class=\"p\">)))]</span>\n              <span class=\"p\">(</span><span class=\"nb\">merge-with </span><span class=\"nv\">clojure.set/union</span> <span class=\"nv\">acc</span> <span class=\"nv\">cache-items</span><span class=\"p\">)))</span>\n          <span class=\"p\">{}</span>\n          <span class=\"nv\">simulated</span><span class=\"p\">))</span>\n\n        <span class=\"nv\">encoder</span> <span class=\"p\">(</span><span class=\"k\">new </span><span class=\"nv\">GifEncoder</span><span class=\"p\">)]</span>\n    <span class=\"c1\">;;(draw 800 mapped-caches load-pics)</span>\n    <span class=\"p\">(</span><span class=\"nf\">.start</span> <span class=\"nv\">encoder</span> <span class=\"s\">\"load.gif\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">.setRepeat</span> <span class=\"nv\">encoder</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">assignments</span> <span class=\"p\">(</span><span class=\"nb\">rest </span><span class=\"nv\">load-pics</span><span class=\"p\">)]</span>\n      <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"nv\">assignments</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">img</span> <span class=\"p\">(</span><span class=\"nf\">draw</span> <span class=\"mi\">500</span> <span class=\"nv\">mapped-caches</span> <span class=\"nv\">assignments</span><span class=\"p\">)]</span>\n        <span class=\"p\">(</span><span class=\"nf\">.addFrame</span> <span class=\"nv\">encoder</span> <span class=\"nv\">img</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"nf\">.finish</span> <span class=\"nv\">encoder</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Next, I will provide a proof of the claims made about consistent hashing.</p>\n\n<p>The paper suggests that there are 3 dimensions to a good distribution of items in caches:</p>\n\n<ul>\n <li>\n  <p>Monotonicity</p></li>\n <li>\n  <p>Spread</p></li>\n <li>\n  <p>Load</p></li>\n <li>\n  <p>Balance</p></li></ul>\n\n<p>Let us see each of these properties in detail:</p>\n\n<h2 id=\"monotonicity\">Monotonicity</h2>\n\n<p>Essentially, when new caches are added, a resource can get mapped only to one of the new caches but can&rsquo;t be mapped to an existing cache (this clearly limits the amount of remapping you will engage in).</p>\n\n<h2 id=\"spread\">Spread</h2>\n\n<p>This property ensures that a single item is not mapped to too many caches (thus ensuring that items are evenly spread across the set of caches).</p>\n\n<p>We could empirically see the evidence for this in the gif above. The proof of this metric has the following flavor:</p>\n\n<ul>\n <li>\n  <p>Assume that items are uniformly distributed on the circle.</p></li>\n <li>\n  <p>An arc length of $ O(\\log{n}) $ on this circle contains a cache with  very high probability (demonstrated using a simple Chernoff bound  application that is available in the original paper).</p></li>\n <li>\n  <p>Stemming from this, we can be sure that, you don&rsquo;t have to travel  far from an item to hit a cache.</p></li>\n <li>\n  <p>From that very lemma, you can also conclude that not too many caches  lie in a small interval around the item.</p></li>\n <li>\n  <p>Use the union bound and you get a nice probability expression for  the spread. i.e. with a high probability, you get a good spread.</p></li></ul>\n\n<h2 id=\"load\">Load</h2>\n\n<p>Load guarantees that a single cache doesn&rsquo;t contain too many items (again the evidence for this is available in the gif above).</p>\n\n<p>The proof is identical to the proof for the spread case (just switch the items with the caches).</p>\n\n<h2 id=\"balance\">Balance</h2>\n\n<p>Balance ensures that overall, the probability that an item is mapped to a cache is uniform (ish) across all caches.</p>\n\n<p>Essentially a chernoff bound gives you a uniform distribution.</p>\n\n<p>Consistent hashing is pretty much everywhere (memcached, Akamai, etc. etc.) and is one of the all time greats of computer science.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-12-18-recovering-background-matrices.md" . unix) f post (u . "Robust Principal Component Pursuit - Background Matrix Recovery") (? . 11) 1387696300 (p+ #"/Users/shriphani/blog/2013/12/18/robust-principal-component-pursuit-background-matrix-recovery/index.html" . unix) "/2013/12/18/robust-principal-component-pursuit-background-matrix-recovery/" (u . "2013-12-18T05:05:31") (? . 38) (? . 1) (c (u . "matrix-decomposition") c (u . "linear-algebra") c (u . "python") c (u . "robust-pcp") c (u . "machine-learning")) (u . "\n<p>I recently spent some time working on a simple linear algebra problem - decompose a matrix $ M $ into a <a href=\"http://en.wikipedia.org/wiki/Rank_(linear_algebra)\">low-rank</a> component $ L $ and a sparse component $ S $. The algorithm I used was very trivial to implement (and parallelize using map-reduce).</p>\n\n<p>In this post, I will implement this very simple algorithm, explain the objective function and demonstrate its (amazing) effectiveness on a surveillance-camera dataset.</p>") #t (u . "\n<p>I recently spent some time working on a simple linear algebra problem - decompose a matrix $ M $ into a <a href=\"http://en.wikipedia.org/wiki/Rank_(linear_algebra)\">low-rank</a> component $ L $ and a sparse component $ S $. The algorithm I used was very trivial to implement (and parallelize using map-reduce).</p>\n\n<p>In this post, I will implement this very simple algorithm, explain the objective function and demonstrate its (amazing) effectiveness on a surveillance-camera dataset.</p>\n<!-- more-->\n\n<p>Given a matrix $ M $, we want to decompose it into $ L + S $ where $ L $ is a dense, low-rank matrix and $ S $ is a sparse matrix. The typical approach to solve these problems involves solving an optimization problem involving the nuclear norm.</p>\n\n<p>Surprisingly, the PCP estimate fully recovers both these matrices. Its objective is $ || L<em>{0} ||</em>{*} + \\lambda||S||_{1} $ subject to $ L + S = M $. Essentially, the $ l1 $ norm enforces sparsity in S and the constraint is intuitive. This works because:</p>\n\n<p><strong>If the singular vectors are reasonably spread, they can be recovered with very high accuracy.</strong> This is clearly seen since a whole host of algorithms we use on a daily basis make use of this. The recovery is also not perturbed too much by slight corruptions (which is related to the sparse component). Thus, recovering the singular values while enforcing sparsity in the corruption matrix (the sparse matrix) is a sufficient condition for recovering the original matrix.</p>\n\n<p>Also, the lambda component itself needs no tuning (!!!!). So no cross-validation component exists. $ \\lambda $ is just set to $ \\frac{1}{\\sqrt{n}} $ where $ n $ is the dimension of the matrix.</p>\n\n<p>The augmented Lagrangian problem works with the following:</p>\n\n<p>$ l(L, S, Y) = ||L||<em>{*} + \\lambda||S||</em>{1} + \\langle Y, M - L - S \\rangle + \\frac{\\mu}{2} ||M - L - S||_{F}^{2} $</p>\n\n<p>where:</p>\n\n<ul>\n <li>The $ ||L||_{*} $ is the nuclear norm and this ensures that the matrix $ L $ is low-rank</li>\n <li>The $ ||S||_{1} $ is sparsity inducing $ l1 $ norm.</li>\n <li>The other two expressions drive the value $ L + S $ towards that of $ M $.</li></ul>\n\n<p>The iteration steps are:</p>\n\n<pre><code>init: S0 = Y0 = 0, mu &gt; 0\nwhile not converged {\n Li+1 = SVD_thresh(M - Si - (1/mu)Yi, mu);\n Si+1 = thresh(M - Li+1 + (1/mu)Yi, lambda * mu);\n Yi+1 = Yi + mu(M - Li+1 - Si+1);\n}\nreturn L, S</code></pre>\n\n<p>where <code>SVD_thresh</code> reconstructs a matrix by zero’ing out singular values that fall below a certain threshold and <code>thresh</code> zeros out matrix elements that fall below the specified threshold.</p>\n\n<p>This simple algorithm accurately recovers the low-rank and sparse matrix components!</p>\n\n<h3 id=\"background-detection\">Background Detection</h3>\n\n<p>A surveillance video camera emits a sequence of frames. Now, consider a matrix where one single row (or an individual column) is created using all the pixels of a frame (<strong>so a 160 x 130 video becomes a 20800 dimension vector</strong>). Since the background component is common across frames, the low-rank component is just a rank&ndash;1 matrix (the only basis vector is the background itself). The sparse component consists of the moving parts (people, escalators, walkways and so on).</p>\n\n<p>Pasted below is the python version of the algorithm above (this is a port from the Matlab version shared by the authors <a href=\"http://perception.csl.illinois.edu/matrix-rank/Files/RPCA_JACM.pdf\">here</a> and uses the excellent PROPACK library to compute the partial SVD):</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"c\">#!/usr/bin/env python </span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"o\">,</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pypropack</span> <span class=\"kn\">import</span> <span class=\"n\">svdp</span><span class=\"p\">;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy.io</span> <span class=\"kn\">import</span> <span class=\"n\">loadmat</span>\n\n<span class=\"n\">MAX_ITERS</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">TOL</span> <span class=\"o\">=</span> <span class=\"mf\">1.0e-7</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_args</span><span class=\"p\">():</span>\n    <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n    <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n        <span class=\"s\">&#39;--mat-file&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">metavar</span> <span class=\"o\">=</span> <span class=\"s\">&#39;mat_file&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"s\">&#39;Location to .mat file&#39;</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n        <span class=\"s\">&#39;--test&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"s\">&#39;test&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"s\">&#39;store_true&#39;</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n        \n    <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">choose_svd</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">sv</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">converged</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">d_norm</span><span class=\"p\">):</span>\n    <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"s\">&#39;fro&#39;</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">d_norm</span>\n    <span class=\"k\">print</span> <span class=\"s\">&#39;ERR&#39;</span><span class=\"p\">,</span> <span class=\"n\">err</span>\n    <span class=\"k\">return</span> <span class=\"n\">err</span> <span class=\"o\">&lt;</span> <span class=\"n\">TOL</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pcp</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">):</span>\n    <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n    <span class=\"c\"># Set params </span>\n    <span class=\"n\">lamda</span> <span class=\"o\">=</span> <span class=\"mf\">1.</span><span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">);</span>\n    <span class=\"c\"># Initialize</span>\n    <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">;</span>\n    <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">svdp</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">which</span><span class=\"o\">=</span><span class=\"s\">&#39;L&#39;</span><span class=\"p\">);</span>\n    <span class=\"n\">norm_two</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">norm_inf</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"p\">(</span> <span class=\"n\">Y</span><span class=\"p\">[:],</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">lamda</span><span class=\"p\">;</span>\n    <span class=\"n\">dual_norm</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">norm_two</span><span class=\"p\">,</span> <span class=\"n\">norm_inf</span><span class=\"p\">);</span>\n    <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">Y</span> <span class=\"o\">/</span> <span class=\"n\">dual_norm</span><span class=\"p\">;</span>\n\n    <span class=\"n\">A_hat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">));</span>\n    <span class=\"n\">E_hat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">));</span>\n    <span class=\"n\">mu</span> <span class=\"o\">=</span> <span class=\"mf\">1.25</span><span class=\"o\">/</span><span class=\"n\">norm_two</span> \n    <span class=\"n\">mu_bar</span> <span class=\"o\">=</span> <span class=\"n\">mu</span> <span class=\"o\">*</span> <span class=\"mf\">1e7</span>\n    <span class=\"n\">rho</span> <span class=\"o\">=</span> <span class=\"mf\">1.5</span>\n    <span class=\"n\">d_norm</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"s\">&#39;fro&#39;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">num_iters</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">total_svd</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">stopCriterion</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">sv</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">num_iters</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n        <span class=\"n\">temp_T</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">-</span> <span class=\"n\">A_hat</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">mu</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">Y</span><span class=\"p\">;</span>\n        <span class=\"n\">E_hat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">maximum</span><span class=\"p\">(</span><span class=\"n\">temp_T</span> <span class=\"o\">-</span> <span class=\"n\">lamda</span><span class=\"o\">/</span><span class=\"n\">mu</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"n\">E_hat</span> <span class=\"o\">=</span> <span class=\"n\">E_hat</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">minimum</span><span class=\"p\">(</span><span class=\"n\">temp_T</span> <span class=\"o\">+</span> <span class=\"n\">lamda</span><span class=\"o\">/</span><span class=\"n\">mu</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n        <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">svdp</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">-</span> <span class=\"n\">E_hat</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">mu</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">sv</span><span class=\"p\">,</span> <span class=\"n\">which</span> <span class=\"o\">=</span> <span class=\"s\">&#39;L&#39;</span><span class=\"p\">);</span>\n\n        <span class=\"n\">diagS</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n        <span class=\"n\">svp</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">mu</span><span class=\"p\">))</span>\n        \n        <span class=\"k\">if</span> <span class=\"n\">svp</span> <span class=\"o\">&lt;</span> <span class=\"n\">sv</span><span class=\"p\">:</span>\n            <span class=\"n\">sv</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">svp</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n        \n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">sv</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">svp</span> <span class=\"o\">+</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"mf\">0.05</span><span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n    \n        <span class=\"n\">A_hat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span>\n                <span class=\"n\">u</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">svp</span><span class=\"p\">],</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">svp</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">mu</span><span class=\"p\">)</span>\n            <span class=\"p\">),</span> \n            <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">svp</span><span class=\"p\">,:]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">total_svd</span> <span class=\"o\">=</span> <span class=\"n\">total_svd</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    \n        <span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">-</span> <span class=\"n\">A_hat</span> <span class=\"o\">-</span> <span class=\"n\">E_hat</span><span class=\"p\">;</span>\n    \n        <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">Y</span> <span class=\"o\">+</span> <span class=\"n\">mu</span><span class=\"o\">*</span><span class=\"n\">Z</span><span class=\"p\">;</span>\n        <span class=\"n\">mu</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">mu</span><span class=\"o\">*</span><span class=\"n\">rho</span><span class=\"p\">,</span> <span class=\"n\">mu_bar</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">converged</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">d_norm</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">num_iters</span> <span class=\"o\">&gt;=</span> <span class=\"n\">MAX_ITERS</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">A_hat</span><span class=\"p\">,</span> <span class=\"n\">E_hat</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">&#39;__main__&#39;</span><span class=\"p\">:</span> \n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">process_args</span><span class=\"p\">()</span>\n    <span class=\"c\"># Load Data</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">loadmat</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">mat_file</span><span class=\"p\">)</span>\n        <span class=\"n\">A_hat</span><span class=\"p\">,</span> <span class=\"n\">E_hat</span> <span class=\"o\">=</span> <span class=\"n\">pcp</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s\">&#39;X&#39;</span><span class=\"p\">])</span>\n        <span class=\"k\">print</span> <span class=\"n\">A_hat</span><span class=\"p\">,</span> <span class=\"n\">E_hat</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n        <span class=\"k\">print</span> <span class=\"n\">data</span>\n        <span class=\"n\">A_hat</span><span class=\"p\">,</span> <span class=\"n\">E_hat</span> <span class=\"o\">=</span> <span class=\"n\">pcp</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s\">&#39;low_rank&#39;</span><span class=\"p\">,</span> <span class=\"n\">A_hat</span><span class=\"p\">)</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s\">&#39;sparse&#39;</span><span class=\"p\">,</span> <span class=\"n\">E_hat</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Next, let us deploy this on a dataset. I obtained a video from a surveillance camera (a few datasets are available <a href=\"http://perception.i2r.a-star.edu.sg/bk_model/bk_index.html\">at this webpage</a>. I will use the Escalator dataset from that page).</p>\n\n<p>The following script builds a <code>numpy</code> matrix from the bitmap image sequence:</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">Convert a bitmap sequence to matrix.</span>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">bitmap_to_mat</span><span class=\"p\">(</span><span class=\"n\">bitmap_seq</span><span class=\"p\">):</span>\n\t<span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n\t<span class=\"k\">for</span> <span class=\"n\">bitmap_file</span> <span class=\"ow\">in</span> <span class=\"n\">bitmap_seq</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">bitmap_file</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"s\">&#39;L&#39;</span><span class=\"p\">)</span> <span class=\"c\"># convert to grayscale</span>\n\t\t<span class=\"n\">pixels</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">getdata</span><span class=\"p\">())</span>\n\t\t<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pixels</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n\t<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n\n\t<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s\">&#39;--bmp-dir&#39;</span><span class=\"p\">,</span> <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"s\">&#39;bmp_dir&#39;</span><span class=\"p\">)</span>\n\t<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s\">&#39;--bmp-out&#39;</span><span class=\"p\">,</span> <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"s\">&#39;bmp_out&#39;</span><span class=\"p\">)</span>\n\n\t<span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n\t<span class=\"n\">bmp_seq</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span>\n\t\t<span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">bmp_dir</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">),</span>\n\t\t<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">bmp_dir</span><span class=\"p\">)</span>\n\t<span class=\"p\">)</span>\n\t<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">bitmap_to_mat</span><span class=\"p\">(</span><span class=\"n\">bmp_seq</span><span class=\"p\">)</span>\n\t<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">bmp_out</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Next, let us run the decomposition and see what the convergence looks like:</p>\n\n<pre><code>➜  robust_pcp git:(master) python robust_pcp.py --input-file bmp_matrix.npy\nERR 0.799466063211\n WARNING: Maximum dimension of Krylov subspace exceeded prior to convergence. Try increasing KMAX.\n neig =            1\nERR 0.533151636032\n WARNING: Maximum dimension of Krylov subspace exceeded prior to convergence. Try increasing KMAX.\n neig =            1\nERR 0.580203519826\nERR 0.399795997647\n WARNING: Maximum dimension of Krylov subspace exceeded prior to convergence. Try increasing KMAX.\n neig =            1\nERR 0.526129524054\n WARNING: Maximum dimension of Krylov subspace exceeded prior to convergence. Try increasing KMAX.\n neig =            1\nERR 0.576362875779\nERR 0.438452861276\nERR 0.137666099277\n WARNING: Maximum dimension of Krylov subspace exceeded prior to convergence. Try increasing KMAX.\n neig =            1\nERR 0.526604907584\n WARNING: Maximum dimension of Krylov subspace exceeded prior to convergence. Try increasing KMAX.\n neig =            1\nERR 0.57572793864\nERR 0.45163686726\nERR 0.111636379698\nERR 0.0718803322749\nERR 0.048067444228\n WARNING: Maximum dimension of Krylov subspace exceeded prior to convergence. Try increasing KMAX.\n neig =            1\nERR 0.536409101582\nERR 0.373332905257\nERR 0.0414766101901\nERR 0.0264232708867\n WARNING: Maximum dimension of Krylov subspace exceeded prior to convergence. Try increasing KMAX.\n neig =            1\nERR 0.509857058194\nERR 0.341770886808\nERR 0.00828382155722\nERR 0.00369347648645\nERR 0.00224842770609\nERR 0.00133359512154\nERR 0.00076422430761\nERR 0.00043106684577\nERR 0.000242042207018\nERR 0.000134750434297\nERR 7.47073010806e-05\nERR 4.12146122072e-05\nERR 2.26314422366e-05\nERR 1.23645958329e-05\nERR 6.76884094823e-06\nERR 3.71124761483e-06\nERR 2.01918022651e-06\nERR 1.10232817344e-06\nERR 6.04773368406e-07\nERR 3.27599538767e-07\nERR 1.79967651854e-07\nERR 9.8752813134e-08</code></pre>\n\n<p>So in 40 iterations, the low-rank and sparse matrices are completely recovered.</p>\n\n<p>Now, let us take a look at what the decomposition looks like. The following piece of code take one of those matrices we built (from the bitmaps) and animates them (i.e. iterates through the sequence):</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">Animate supplied npy files</span>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">Tkinter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span><span class=\"p\">,</span> <span class=\"n\">ImageTk</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">animate</span><span class=\"p\">(</span><span class=\"n\">matrices</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">):</span>\n\t<span class=\"n\">mats</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">matrices</span><span class=\"p\">]</span>\n\n\t<span class=\"n\">tk_win</span> <span class=\"o\">=</span> <span class=\"n\">Tkinter</span><span class=\"o\">.</span><span class=\"n\">Toplevel</span><span class=\"p\">()</span>\n\t<span class=\"n\">tk_win</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s\">&#39;Escalator&#39;</span><span class=\"p\">)</span>\n\t<span class=\"n\">canvas</span> <span class=\"o\">=</span> <span class=\"n\">Tkinter</span><span class=\"o\">.</span><span class=\"n\">Canvas</span><span class=\"p\">(</span><span class=\"n\">tk_win</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"o\">*</span><span class=\"n\">h</span><span class=\"p\">)</span>\n\t<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">()</span>\n\t<span class=\"n\">tk_ims</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">None</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">mats</span><span class=\"p\">]</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">mats</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n\t\t<span class=\"n\">ims</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&#39;L&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">mats</span><span class=\"p\">]</span>\n\t\t<span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">im</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">ims</span><span class=\"p\">):</span>\n\t\t\t<span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">putdata</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">mats</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])))</span>\n\t\t\t<span class=\"n\">tk_ims</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ImageTk</span><span class=\"o\">.</span><span class=\"n\">PhotoImage</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">)</span>\n\t\t\t<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"n\">create_image</span><span class=\"p\">((</span><span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">tk_ims</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span>\n\t\t\t<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n\t<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n\n\t<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n\t\t<span class=\"s\">&#39;width&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"s\">&#39;frame width&#39;</span>\n\t<span class=\"p\">)</span>\n\t<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n\t\t<span class=\"s\">&#39;height&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"s\">&#39;frame width&#39;</span>\n\t<span class=\"p\">)</span>\n\t<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n\t\t<span class=\"s\">&#39;--npy-files&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"s\">&#39;npy_files&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">nargs</span> <span class=\"o\">=</span> <span class=\"s\">&#39;+&#39;</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"s\">&#39;numpy matrices&#39;</span>\n\t<span class=\"p\">)</span>\n\n\t<span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n\t<span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">npy_files</span><span class=\"p\">,</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And here’s a frame from the resulting animation. The first frame is the original image sequence (in grayscale), the second is the low-rank component (the background) and the sparse component consists of the people:</p>\n\n<p>\n <image src=\"http://shriphani.com/pics/blog_frame.png\"></image></p>\n\n<p>The algorithm is thus super-powerful and easy to implement.</p>\n\n<p>The full source code is available in <a href=\"https://github.com/shriphani/robust_pcp\">this github repository</a>.</p>\n\n<p>References:</p>\n\n<ul>\n <li>Robust PCA: <a href=\"http://perception.csl.illinois.edu/matrix-rank/Files/RPCA_JACM.pdf\">http://perception.csl.illinois.edu/matrix-rank/Files/RPCA_JACM.pdf</a></li>\n <li>PROPACK: <a href=\"https://github.com/jakevdp/pypropack\">https://github.com/jakevdp/pypropack</a></li></ul>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-05-28-gianni-agnelli.md" . unix) f post (u . "Gianni Agnelli") (? . 3) 1401290260 (p+ #"/Users/shriphani/blog/2014/05/28/gianni-agnelli/index.html" . unix) "/2014/05/28/gianni-agnelli/" (u . "2014-05-28T11:06:13") (? . 0) (? . 2) (c (u . "gianni") c (u . "agnelli") c (u . "fiat") c (u . "ferrari") c (u . "mens-fashion") c (u . "dapper")) (u . "\n<p>Of Fiat, Ferrari, Maserati, Sestriere fame. Also, the best dressed man ever (IMO):</p>\n\n<p><img src=\"http://xlegit.files.wordpress.com/2010/06/gianni_agnelli-005.jpg\" /></p>\n\n<p><img src=\"http://www.ganzomag.com/wp-content/uploads/2012/02/Gianni-in-St.Moritz.jpg\" /></p>") #f (u . "\n<p>Of Fiat, Ferrari, Maserati, Sestriere fame. Also, the best dressed man ever (IMO):</p>\n\n<p><img src=\"http://xlegit.files.wordpress.com/2010/06/gianni_agnelli-005.jpg\" /></p>\n\n<p><img src=\"http://www.ganzomag.com/wp-content/uploads/2012/02/Gianni-in-St.Moritz.jpg\" /></p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-05-18-wikipedia-server-requests-by-the-hour.md" . unix) f post (u . "Wikipedia Server Requests By the Hour") (? . 25) 1400676469 (p+ #"/Users/shriphani/blog/2014/05/18/wikipedia-server-requests-by-the-hour/index.html" . unix) "/2014/05/18/wikipedia-server-requests-by-the-hour/" (u . "2014-05-18T00:38:54") (? . 23) (? . 0) (c (u . "d3") c (u . "visualizations") c (u . "wikipedia") c (u . "visualization")) (u . "\n<p>I found <a href=\"http://www.wikibench.eu/?page_id=60\">this dataset</a> of server requests to Wikipedia. This is a plot of the server requests made by the hour on 19th of September, 2007.</p>\n\n<iframe frameborder=\"0\" height=\"700\" width=\"900\" scrolling=\"no\" src=\"http://shriphani.com/visualizations/wikipedia_trace/\"></iframe>\n\n<p>Code and processed dataset used to generate this plot are <a href=\"https://github.com/shriphani/visualizations/tree/master/wikipedia_trace\">in this repo</a>.</p>") #f (u . "\n<p>I found <a href=\"http://www.wikibench.eu/?page_id=60\">this dataset</a> of server requests to Wikipedia. This is a plot of the server requests made by the hour on 19th of September, 2007.</p>\n\n<iframe frameborder=\"0\" height=\"700\" width=\"900\" scrolling=\"no\" src=\"http://shriphani.com/visualizations/wikipedia_trace/\"></iframe>\n\n<p>Code and processed dataset used to generate this plot are <a href=\"https://github.com/shriphani/visualizations/tree/master/wikipedia_trace\">in this repo</a>.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-01-11-all-it-took-was.md" . unix) f post (u . "All It Took Was An AHA!") (? . 12) 1389496195 (p+ #"/Users/shriphani/blog/2014/01/11/all-it-took-was-an-aha/index.html" . unix) "/2014/01/11/all-it-took-was-an-aha/" (u . "2014-01-11T21:55:13") (? . 1) (? . 4) (c (u . "life") c (u . "thoughts")) (u . "\n<p>I can clearly recall why I became a computer scientist. I was sitting in a class and we were discussing how <code>cons</code> was implemented. And then I saw this definition:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a> </span><span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a> </span><span class=\"p\">(</span><span class=\"nf\">x</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a> </span><span class=\"nv\">x</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">)))</span>\n        \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._first))\" style=\"color: inherit\">first</a></span> <span class=\"nv\">l</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">l</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._rest))\" style=\"color: inherit\">rest</a></span> <span class=\"nv\">l</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">l</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The lambda calculus and the material in the little schemer kept me in the field (computer-science i.e.) and assured me that there would never be a dearth of aha! moments in my education.</p>\n\n<p>Good educators can deliver such aha! moments in every single lecture. A good textbook can do it several times each chapter.</p>\n\n<p>I have since tried to find material that delivers such aha! moments.</p>\n\n<p>Hopefully, I will encounter them for the rest of my life in whatever I do.</p>") #f (u . "\n<p>I can clearly recall why I became a computer scientist. I was sitting in a class and we were discussing how <code>cons</code> was implemented. And then I saw this definition:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a> </span><span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a> </span><span class=\"p\">(</span><span class=\"nf\">x</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a> </span><span class=\"nv\">x</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">)))</span>\n        \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._first))\" style=\"color: inherit\">first</a></span> <span class=\"nv\">l</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">l</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._rest))\" style=\"color: inherit\">rest</a></span> <span class=\"nv\">l</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">l</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The lambda calculus and the material in the little schemer kept me in the field (computer-science i.e.) and assured me that there would never be a dearth of aha! moments in my education.</p>\n\n<p>Good educators can deliver such aha! moments in every single lecture. A good textbook can do it several times each chapter.</p>\n\n<p>I have since tried to find material that delivers such aha! moments.</p>\n\n<p>Hopefully, I will encounter them for the rest of my life in whatever I do.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-10-15-crawler-dos-donts.md" . unix) f post (u . "Web Crawling - Dos and Don'ts") (? . 29) 1381870902 (p+ #"/Users/shriphani/blog/2013/10/15/web-crawling-dos-and-don-ts/index.html" . unix) "/2013/10/15/web-crawling-dos-and-don-ts/" (u . "2013-10-15T04:22:44") (? . 28) (? . 13) (c (u . "research") c (u . "itsy") c (u . "crawling")) (u . "\n<p>For my SIGIR submission I have been working on finding efficient traversal strategies while crawling websites.</p>\n\n<p>Web crawling is a straightforward graph-traversal problem. My research focuses on discarding unproductive paths and preserving bandwidth to find more information. I will write a post on it once I have my ideas fleshed out and thus that won&rsquo;t be the focus of this post.</p>\n\n<p>Here, I will describe the finer details needed to make your crawler polite and robust. An impolite crawler will incur the wrath of an admin and might get you banned. A crawler that isn&rsquo;t robust cannot survive the onslaught of quirks that the WWW is full of.</p>") #t (u . "\n<p>For my SIGIR submission I have been working on finding efficient traversal strategies while crawling websites.</p>\n\n<p>Web crawling is a straightforward graph-traversal problem. My research focuses on discarding unproductive paths and preserving bandwidth to find more information. I will write a post on it once I have my ideas fleshed out and thus that won&rsquo;t be the focus of this post.</p>\n\n<p>Here, I will describe the finer details needed to make your crawler polite and robust. An impolite crawler will incur the wrath of an admin and might get you banned. A crawler that isn&rsquo;t robust cannot survive the onslaught of quirks that the WWW is full of.</p>\n<!-- more-->\n\n<h3>Programming Environment</h3>\n\n<p>I do not believe it is worthwhile to iterate and formulate your ideas on a large and complicated web-crawler. Heritrix is good for large-scale crawling exercises but I would really not undertake the task of manipulating its insides for testing simple hypotheses.</p>\n\n<p>Clojure makes the JVM dynamic - this allows one to leverage the high-quality libraries the Java enjoys while working in a repl. Clojure is my go-to language for my research and I hope to be able to keep using it forever.</p>\n\n<h3>Politeness</h3>\n\n<p>Crawlers need to be polite. Politeness means one must adhere to the various ways in which websites can restrict how crawlers behave. I use the following rules of thumb:</p>\n\n<ul>\n <li>\n  <p>Maintain a delay between successive requests to a web-server.  Heritrix by default uses the formula:   <code>response_time * 1.5</code>.   You can specify minimum and maximum intervals as well  and then work with that. I typically wait 3 seconds between  requests.</p></li>\n <li>\n  <p>Adhere to whatever robots.txt says. Seriously.</p></li>\n <li>\n  <p>Do not follow anchor tags containing the <code>rel=\"nofollow\"</code>  attribute.</p></li></ul>\n\n<h3>Regexes are not always the answer</h3>\n\n<p>While it is tempting to use regexes to do things like discovering subdomains, I would personally recommend that one use the tried and tested approach called DNS. Make a request to fetch the DNS, type A or AAAA record for a new or unknown host. I personally don&rsquo;t bother with the AAAA record (I am not sure what chunk of the internet bothers with IPV6). Most languages have a DNS module that will do all the right things for you.</p>\n\n<p>If DNS fails, it is possible the hosts file contains an address. I generally do not bother with this as well.</p>\n\n<h3>Malicious Links Paths</h3>\n\n<blockquote>\n <p>Never attribute to malice that which is adequately explained by stupidity. - Hanlon&rsquo;s Razor</p></blockquote>\n\n<p>Not every hyperlink you are allowed to follow should be followed. It is very easy for a webserver to dispatch responses using code like this:</p>\n\n<pre><code>path_segments &lt;- url.split(\"/\")\nreturn id_page_table[last(path_segments)]</code></pre>\n\n<p>This means that an entire path string is being ignored and only the last path segment determines the response. This is a symptom of that disease we call SEO-friendliness. This essentially means that:</p>\n\n<ul>\n <li>\n  <p>foo.bar.com/this/is/a/path/segment/123456</p></li>\n <li>\n  <p>foo.bar.com/this/is/another/path/segment/123456</p></li>\n <li>\n  <p>foo.bar.com/this/is/yet/another/path/segment/123456</p></li></ul>\n\n<p>will lead to the server returning the exact same response. If the webpage has some dynamic feature like the time of the day, the responses won&rsquo;t be identical (requiring you to employ shingles or somesuch to detect near-duplicate content).</p>\n\n<p>It is tempting to think that this problem cannot affect one at all. Wrong. I was bitten by it on a website where the generated HTML&rsquo;s links contained path segments appended to the end of the current URL.</p>\n\n<p>After a certain period of time, you would begin seeing a list of URLs that looked like:</p>\n\n<ul>\n <li>\n  <p>foo.bar.com/this/is/a/path/segment/123456</p></li>\n <li>\n  <p>foo.bar.com/this/is/a/path/segment/path/segment/123456</p></li>\n <li>\n  <p>foo.bar.com/this/is/a/path/segment/this/is/a/path/segment/123456</p></li></ul>\n\n<p>The net result was that the site generated a ton of URLs and dominated the downloaded list.</p>\n\n<p>This is a problem that will bite you, Heritrix can be configured to discard URLs where the path segments repeat several times. This will minimize damage.</p>\n\n<p>Tracking repeating path segments is not a sufficient condition in and of itself. I once had a site append some uniquely generated string (I can only wonder why) to the end of my requests and it set off into an infinite 301 redirect chain. You can specify how many 301 redirects you are willing to tolerate. This also brings me to my next point:</p>\n\n<h3>Expose Critical Data-Structures</h3>\n\n<p>The WWW is insane. You cannot account for all the quirks that exist. You can only respond to situations as they materialize. This means at some point you will need to remove URLs from your crawler&rsquo;s frontier (a fancy word for a <code>to-visit</code> queue).</p>\n\n<p>In the lisp world this is trivial to achieve. Your repl provides you access to all the critical data-structures. A small DSL will easily suffice. Heritrix provides a REST API and accepts Groovy scripts (This is the best one can do with a language like Java) that can access some data structures. In any moderately sized crawl (at least 10-million documents), I have been forced to use this.</p>\n\n<p>If I think of any other pitfalls, I will put them here.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-05-31-disco-rectangles.md" . unix) f post (u . "Disco Rectangles") (? . 2) 1401569134 (p+ #"/Users/shriphani/blog/2014/05/31/disco-rectangles/index.html" . unix) "/2014/05/31/disco-rectangles/" (u . "2014-05-31T16:43:46") (? . 3) (? . 8) (c (u . "art") c (u . "quil")) (u . "\n<p>I was playing with quil recently (got a project planned which I will speak about later) and managed to throw this together in a short while:</p>\n\n<p><img src=\"https://raw.githubusercontent.com/shriphani/art/master/disco/rainbow_disco.gif\" /></p>\n\n<p>Clojure source <a href=\"https://github.com/shriphani/art/blob/master/disco/src/disco/core.clj\">available here</a>.</p>") #f (u . "\n<p>I was playing with quil recently (got a project planned which I will speak about later) and managed to throw this together in a short while:</p>\n\n<p><img src=\"https://raw.githubusercontent.com/shriphani/art/master/disco/rainbow_disco.gif\" /></p>\n\n<p>Clojure source <a href=\"https://github.com/shriphani/art/blob/master/disco/src/disco/core.clj\">available here</a>.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-02-18-clojure-blekko-api.md" . unix) f post (u . "Clojure Blekko API") (? . 26) 1392704320 (p+ #"/Users/shriphani/blog/2014/02/18/clojure-blekko-api/index.html" . unix) "/2014/02/18/clojure-blekko-api/" (u . "2014-02-18T01:03:12") (? . 4) (? . 5) (c (u . "clojure") c (u . "blekko") c (u . "API")) (u . "\n<p>Back when Blekko had an API, I threw <a href=\"https://github.com/shriphani/clj-blekko\">this implementation of their API together</a> for a small project I was working on. You can only query blekko with this (the API allows slashtag manipulation and all that which I didn&rsquo;t bother with).</p>\n\n<p>Anyway, you can do this:</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>With leiningen:</p>\n\n<pre><code>[clj_blekko \"0.1.0\"]</code></pre>\n\n<p>With maven:</p>\n\n<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;clj_blekko&lt;/groupId&gt;\n  &lt;artifactId&gt;clj_blekko&lt;/artifactId&gt;\n  &lt;version&gt;0.1.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n\n<p>You can just do this:</p>\n\n<pre><code>user&gt; (use 'clj-blekko.core :reload)\n\nuser&gt; (clojure.pprint/pprint (:RESULT (run-query \"shriphani\" api-key :json true :page 2)))\n[{:c 1,\n  :display_url\n  \"kindle.amazon.com/profile/Werner-Vogels/160/followers/65\",\n  :n_group 41,\n  :short_host \"kindle.amazon.com\",\n  :short_host_url \"http://kindle.amazon.com/\",\n  :snippet\n  \"1 Followers 0 Books with Public Notes.  Peter van der Reijden.  5 Followers 0 Books with Public Notes.  4 Followers 0 Books with Public Notes.  0 Followers 0 Books with Public Notes.\",\n  :url\n  \"https://kindle.amazon.com/profile/Werner-Vogels/160/followers/65\",\n  :url_title \"Amazon Kindle - Werner Vogels - Followers\"}\n {:c 2,\n  :display_url \"yelp.com/biz/M8P96GmGImU0KOrFMfVCKw\",\n  :n_group 42,\n  :short_host \"yelp.com\",\n  :short_host_url \"http://www.yelp.com/\",\n  :snippet\n  \"33 reviews for Blue Nile Restaurant.  Blue Nile Restaurant.  117 Northwestern Ave Ste 2 West Lafayette, IN 47906.  Mon-Sat 11 am - 11 pm.  Sun 12 pm - 10 pm.\",\n  :url \"http://www.yelp.com/biz/M8P96GmGImU0KOrFMfVCKw\",\n  :url_title\n  \"&lt;strong&gt;Yelp.com&lt;/strong&gt; - Blue Nile Restaurant - West Lafayette, IN\"}\n {:c 3,\n  :display_url \"yelp.com/biz/blue-ni\nle-restaurant-west-lafayette\",\n  :n_group 43,\n  :short_host \"yelp.com\",\n  :short_host_url \"http://www.yelp.com/\",\n  :snippet\n  \"34 reviews for Blue Nile Restaurant.  Blue Nile Restaurant.  117 Northwestern Ave Ste 2 West Lafayette, IN 47906.  Mon-Sat 11 am - 11 pm.  Sun 12 pm - 10 pm.\",\n  :url \"http://www.yelp.com/biz/blue-nile-restaurant-west-lafayette\",\n  :url_title\n  \"&lt;strong&gt;Yelp.com&lt;/strong&gt; - Blue Nile Restaurant - West Lafayette, IN\"}\n {:c 4,\n  :display_url \"amazon.com/gp/product/0679776222?link_code=as3\",\n  :n_group 44,\n  :short_host \"amazon.com\",\n  :short_host_url \"http://www.amazon.com/\",\n  :snippet\n  \"Frequently Bought Together.  Customers Who Bought This Item Also Bought.  More About the Authors.  Very Bad Poetry Paperback.  Very Bad Poetry (Vintage) and over one million other books are available for Amazon Kindle.\",\n  :url \"http://www.amazon.com/gp/product/0679776222?link_code=as3\",\n  :url_title\n  \"&lt;strong&gt;Amazon.com&lt;/strong&gt; - Very Bad Poetry - Ross Petras, Kathryn Petras - 9780679776222 - Amazo\nn.com - Books\"}\n {:c 5,\n  :display_url \"yelp.com/biz/shaukin-indian-fast-food-west-lafayette\",\n  :n_group 45,\n  :short_host \"yelp.com\",\n  :short_host_url \"http://www.yelp.com/\",\n  :snippet\n  \"23 reviews for Shaukin Indian Fast Food.  138 S River Rd West Lafayette, IN 47906.  Tue-Thu 4 pm - 10 pm.  Fri-Sun 12 pm - 10 pm.  Good for Kids.\",\n  :url\n  \"http://www.yelp.com/biz/shaukin-indian-fast-food-west-lafayette\",\n  :url_title\n  \"&lt;strong&gt;Yelp.com&lt;/strong&gt; - Shaukin Indian Fast Food - West Lafayette, IN\"}\n {:c 6,\n  :display_url\n  \"reddit.com/.../who_here_doesnt_sympathize_with_g20_rioters\",\n  :n_group 46,\n  :short_host \"reddit.com\",\n  :short_host_url \"http://www.reddit.com/\",\n  :snippet\n  \"Login or register in seconds.  Limit my search to /r/worldnews.  Use the following search parameters to narrow your results.  Search for &amp;quot;text&amp;quot; in url.  Search for &amp;quot;text&amp;quot; in self post contents.\",\n  :url\n  \"http://www.reddit.com/r/worldnews/comments/cjhse/who_here_doesnt_sympathize_with_g20_rioters/\",\n  :url_title\n\n  \"&lt;strong&gt;Too Many Requests&lt;/strong&gt; - Who here doesn&amp;#39;t sympathize with G20 rioters destroying people&amp;#39;s property - worldnews\"}\n {:c 7,\n  :display_url \"yelp.ie/biz/shaukin-indian-fast-food-west-lafayette\",\n  :n_group 47,\n  :short_host \"yelp.ie\",\n  :short_host_url \"http://www.yelp.ie/\",\n  :snippet\n  \"Recommended Reviews for Shaukin Indian Fast Food.  Cookies help us deliver our services.  By using our services, you agree to our use of cookies.  138 S River Rd West Lafayette, IN 47906.  Good for Children.\",\n  :url\n  \"http://www.yelp.ie/biz/shaukin-indian-fast-food-west-lafayette\",\n  :url_title \"Shaukin Indian Fast Food - West Lafayette, IN\"}\n {:c 8,\n  :display_url\n  \"en.yelp.be/biz/shaukin-indian-fast-food-west-lafayette\",\n  :n_group 48,\n  :short_host \"en.yelp.be\",\n  :short_host_url \"http://en.yelp.be/\",\n  :snippet\n  \"25 reviews for Shaukin Indian Fast Food.  138 S River Rd West Lafayette, IN 47906.  Good for Children.  Accepts Credit Cards.  Good for Groups.\",\n  :url \"http://en.yelp.be/biz/shaukin-ind\nian-fast-food-west-lafayette\",\n  :url_title \"Shaukin Indian Fast Food - West Lafayette, IN\"}\n {:c 9,\n  :display_url \"quora.com/Colin-Ho\",\n  :n_group 49,\n  :short_host \"quora.com\",\n  :short_host_url \"http://www.quora.com/\",\n  :snippet\n  \"You must sign in to read Quora past the first answer.  Login to Quora.  Complete your account on Quora.  There are some updates to this page that haven&amp;#39;t been applied yet because you&amp;#39;ve entered some data into a form.  Refresh this page to receive new updates.\",\n  :url \"http://www.quora.com/Colin-Ho\",\n  :url_title \"Colin Ho - &lt;strong&gt;Quora&lt;/strong&gt;\"}\n {:c 10,\n  :display_url\n  \"quora.com/...change-the-world-the-most-within-the-next-25-years\",\n  :n_group 50,\n  :short_host \"quora.com\",\n  :short_host_url \"http://www.quora.com/\",\n  :snippet\n  \"You must sign in to read past the first answer.  Complete Your Profile.  Login to Quora.  You must sign in to read all of Quora.  You must be signed in to read this answer.\",\n  :url\n  \"http://www.quora.com/Which-technological-innovatio\nn-will-change-the-world-the-most-within-the-next-25-years\",\n  :url_title\n  \"&lt;strong&gt;Quora&lt;/strong&gt; - Which technological innovation will change the world the most within the next 25 years - Quora\"}\n {:display_url \"meetup.com/Clojure-PGH\",\n  :short_host \"meetup.com\",\n  :c 11,\n  :url_title\n  \"&lt;strong&gt;Meetup&lt;/strong&gt; - Pittsburgh Clojure Users Group (Pittsburgh, PA) - Meetup\",\n  :n_group 51,\n  :doc_date \"Mar 2010\",\n  :url \"http://www.meetup.com/Clojure-PGH/\",\n  :short_host_url \"http://www.meetup.com/\",\n  :snippet\n  \"Welcome old lispers and new schemers.  Come to our next event to meet other programmers interested in the latest secret alien technology.  We are building a community of people who want to learn from and teach others about Clojure.  Talking with printed notes is encouraged, powerpoints are forbidden.\",\n  :doc_date_iso \"2010-03-04 00:00:00\"}\n {:c 12,\n  :display_url\n  \"quora.com/.../How-do-you-ensure-that-TAs-for-introductory-CS...\",\n  :n_group 52,\n  :short_host \"quora.com\",\n  :short_host_url \"http://w\nww.quora.com/\",\n  :snippet\n  \"You must sign in to read past the first answer.  Complete Your Profile.  Login to Quora.  You must sign in to read all of Quora.  You must be signed in to read this answer.\",\n  :url\n  \"http://www.quora.com/Computer-Science-Education/How-do-you-ensure-that-TAs-for-introductory-CS-classes-teach-at-a-high-quality\",\n  :url_title\n  \"&lt;strong&gt;Quora&lt;/strong&gt; - Computer Science Education - How do you ensure that TAs for introductory CS classes teach at ... \"}\n {:c 13,\n  :display_url\n  \"quora.com/.../Is-it-already-too-late-to-get-on-the-wave-of-f...\",\n  :n_group 53,\n  :short_host \"quora.com\",\n  :short_host_url \"http://www.quora.com/\",\n  :snippet\n  \"If I were to start learning Scala and the functional programming paradigm (coming from imperative languages), am I getting early or late to the party.  I&amp;#39;m a functional learner myself.\",\n  :url\n  \"http://www.quora.com/Scala/Is-it-already-too-late-to-get-on-the-wave-of-functional-programming-and-Scala\",\n  :url_title\n  \"&lt;strong&gt;Quora&lt;/strong&gt; \n- Is it already too late to get on the wave of functional programming and Scala\"}\n {:c 14,\n  :display_url \"python.org/doc/3.0.1/about.html\",\n  :n_group 54,\n  :short_host \"python.org\",\n  :short_host_url \"http://www.python.org/\",\n  :snippet\n  \"Contributors to the Python Documentation.  About these documents.  These documents are generated from reStructuredText sources by Sphinx, a document processor specifically written for the Python documentation.\",\n  :url \"http://www.python.org/doc/3.0.1/about.html\",\n  :url_title\n  \"&lt;strong&gt;Python Programming Language&lt;/strong&gt; - About these documents — Python v3.0.1 documentation\"}]</code></pre>\n\n<p>Anyway, thought it might be useful (even though blekko&rsquo;s gone and nuked free access to their API).</p>") #f (u . "\n<p>Back when Blekko had an API, I threw <a href=\"https://github.com/shriphani/clj-blekko\">this implementation of their API together</a> for a small project I was working on. You can only query blekko with this (the API allows slashtag manipulation and all that which I didn&rsquo;t bother with).</p>\n\n<p>Anyway, you can do this:</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>With leiningen:</p>\n\n<pre><code>[clj_blekko \"0.1.0\"]</code></pre>\n\n<p>With maven:</p>\n\n<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;clj_blekko&lt;/groupId&gt;\n  &lt;artifactId&gt;clj_blekko&lt;/artifactId&gt;\n  &lt;version&gt;0.1.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n\n<p>You can just do this:</p>\n\n<pre><code>user&gt; (use 'clj-blekko.core :reload)\n\nuser&gt; (clojure.pprint/pprint (:RESULT (run-query \"shriphani\" api-key :json true :page 2)))\n[{:c 1,\n  :display_url\n  \"kindle.amazon.com/profile/Werner-Vogels/160/followers/65\",\n  :n_group 41,\n  :short_host \"kindle.amazon.com\",\n  :short_host_url \"http://kindle.amazon.com/\",\n  :snippet\n  \"1 Followers 0 Books with Public Notes.  Peter van der Reijden.  5 Followers 0 Books with Public Notes.  4 Followers 0 Books with Public Notes.  0 Followers 0 Books with Public Notes.\",\n  :url\n  \"https://kindle.amazon.com/profile/Werner-Vogels/160/followers/65\",\n  :url_title \"Amazon Kindle - Werner Vogels - Followers\"}\n {:c 2,\n  :display_url \"yelp.com/biz/M8P96GmGImU0KOrFMfVCKw\",\n  :n_group 42,\n  :short_host \"yelp.com\",\n  :short_host_url \"http://www.yelp.com/\",\n  :snippet\n  \"33 reviews for Blue Nile Restaurant.  Blue Nile Restaurant.  117 Northwestern Ave Ste 2 West Lafayette, IN 47906.  Mon-Sat 11 am - 11 pm.  Sun 12 pm - 10 pm.\",\n  :url \"http://www.yelp.com/biz/M8P96GmGImU0KOrFMfVCKw\",\n  :url_title\n  \"&lt;strong&gt;Yelp.com&lt;/strong&gt; - Blue Nile Restaurant - West Lafayette, IN\"}\n {:c 3,\n  :display_url \"yelp.com/biz/blue-ni\nle-restaurant-west-lafayette\",\n  :n_group 43,\n  :short_host \"yelp.com\",\n  :short_host_url \"http://www.yelp.com/\",\n  :snippet\n  \"34 reviews for Blue Nile Restaurant.  Blue Nile Restaurant.  117 Northwestern Ave Ste 2 West Lafayette, IN 47906.  Mon-Sat 11 am - 11 pm.  Sun 12 pm - 10 pm.\",\n  :url \"http://www.yelp.com/biz/blue-nile-restaurant-west-lafayette\",\n  :url_title\n  \"&lt;strong&gt;Yelp.com&lt;/strong&gt; - Blue Nile Restaurant - West Lafayette, IN\"}\n {:c 4,\n  :display_url \"amazon.com/gp/product/0679776222?link_code=as3\",\n  :n_group 44,\n  :short_host \"amazon.com\",\n  :short_host_url \"http://www.amazon.com/\",\n  :snippet\n  \"Frequently Bought Together.  Customers Who Bought This Item Also Bought.  More About the Authors.  Very Bad Poetry Paperback.  Very Bad Poetry (Vintage) and over one million other books are available for Amazon Kindle.\",\n  :url \"http://www.amazon.com/gp/product/0679776222?link_code=as3\",\n  :url_title\n  \"&lt;strong&gt;Amazon.com&lt;/strong&gt; - Very Bad Poetry - Ross Petras, Kathryn Petras - 9780679776222 - Amazo\nn.com - Books\"}\n {:c 5,\n  :display_url \"yelp.com/biz/shaukin-indian-fast-food-west-lafayette\",\n  :n_group 45,\n  :short_host \"yelp.com\",\n  :short_host_url \"http://www.yelp.com/\",\n  :snippet\n  \"23 reviews for Shaukin Indian Fast Food.  138 S River Rd West Lafayette, IN 47906.  Tue-Thu 4 pm - 10 pm.  Fri-Sun 12 pm - 10 pm.  Good for Kids.\",\n  :url\n  \"http://www.yelp.com/biz/shaukin-indian-fast-food-west-lafayette\",\n  :url_title\n  \"&lt;strong&gt;Yelp.com&lt;/strong&gt; - Shaukin Indian Fast Food - West Lafayette, IN\"}\n {:c 6,\n  :display_url\n  \"reddit.com/.../who_here_doesnt_sympathize_with_g20_rioters\",\n  :n_group 46,\n  :short_host \"reddit.com\",\n  :short_host_url \"http://www.reddit.com/\",\n  :snippet\n  \"Login or register in seconds.  Limit my search to /r/worldnews.  Use the following search parameters to narrow your results.  Search for &amp;quot;text&amp;quot; in url.  Search for &amp;quot;text&amp;quot; in self post contents.\",\n  :url\n  \"http://www.reddit.com/r/worldnews/comments/cjhse/who_here_doesnt_sympathize_with_g20_rioters/\",\n  :url_title\n\n  \"&lt;strong&gt;Too Many Requests&lt;/strong&gt; - Who here doesn&amp;#39;t sympathize with G20 rioters destroying people&amp;#39;s property - worldnews\"}\n {:c 7,\n  :display_url \"yelp.ie/biz/shaukin-indian-fast-food-west-lafayette\",\n  :n_group 47,\n  :short_host \"yelp.ie\",\n  :short_host_url \"http://www.yelp.ie/\",\n  :snippet\n  \"Recommended Reviews for Shaukin Indian Fast Food.  Cookies help us deliver our services.  By using our services, you agree to our use of cookies.  138 S River Rd West Lafayette, IN 47906.  Good for Children.\",\n  :url\n  \"http://www.yelp.ie/biz/shaukin-indian-fast-food-west-lafayette\",\n  :url_title \"Shaukin Indian Fast Food - West Lafayette, IN\"}\n {:c 8,\n  :display_url\n  \"en.yelp.be/biz/shaukin-indian-fast-food-west-lafayette\",\n  :n_group 48,\n  :short_host \"en.yelp.be\",\n  :short_host_url \"http://en.yelp.be/\",\n  :snippet\n  \"25 reviews for Shaukin Indian Fast Food.  138 S River Rd West Lafayette, IN 47906.  Good for Children.  Accepts Credit Cards.  Good for Groups.\",\n  :url \"http://en.yelp.be/biz/shaukin-ind\nian-fast-food-west-lafayette\",\n  :url_title \"Shaukin Indian Fast Food - West Lafayette, IN\"}\n {:c 9,\n  :display_url \"quora.com/Colin-Ho\",\n  :n_group 49,\n  :short_host \"quora.com\",\n  :short_host_url \"http://www.quora.com/\",\n  :snippet\n  \"You must sign in to read Quora past the first answer.  Login to Quora.  Complete your account on Quora.  There are some updates to this page that haven&amp;#39;t been applied yet because you&amp;#39;ve entered some data into a form.  Refresh this page to receive new updates.\",\n  :url \"http://www.quora.com/Colin-Ho\",\n  :url_title \"Colin Ho - &lt;strong&gt;Quora&lt;/strong&gt;\"}\n {:c 10,\n  :display_url\n  \"quora.com/...change-the-world-the-most-within-the-next-25-years\",\n  :n_group 50,\n  :short_host \"quora.com\",\n  :short_host_url \"http://www.quora.com/\",\n  :snippet\n  \"You must sign in to read past the first answer.  Complete Your Profile.  Login to Quora.  You must sign in to read all of Quora.  You must be signed in to read this answer.\",\n  :url\n  \"http://www.quora.com/Which-technological-innovatio\nn-will-change-the-world-the-most-within-the-next-25-years\",\n  :url_title\n  \"&lt;strong&gt;Quora&lt;/strong&gt; - Which technological innovation will change the world the most within the next 25 years - Quora\"}\n {:display_url \"meetup.com/Clojure-PGH\",\n  :short_host \"meetup.com\",\n  :c 11,\n  :url_title\n  \"&lt;strong&gt;Meetup&lt;/strong&gt; - Pittsburgh Clojure Users Group (Pittsburgh, PA) - Meetup\",\n  :n_group 51,\n  :doc_date \"Mar 2010\",\n  :url \"http://www.meetup.com/Clojure-PGH/\",\n  :short_host_url \"http://www.meetup.com/\",\n  :snippet\n  \"Welcome old lispers and new schemers.  Come to our next event to meet other programmers interested in the latest secret alien technology.  We are building a community of people who want to learn from and teach others about Clojure.  Talking with printed notes is encouraged, powerpoints are forbidden.\",\n  :doc_date_iso \"2010-03-04 00:00:00\"}\n {:c 12,\n  :display_url\n  \"quora.com/.../How-do-you-ensure-that-TAs-for-introductory-CS...\",\n  :n_group 52,\n  :short_host \"quora.com\",\n  :short_host_url \"http://w\nww.quora.com/\",\n  :snippet\n  \"You must sign in to read past the first answer.  Complete Your Profile.  Login to Quora.  You must sign in to read all of Quora.  You must be signed in to read this answer.\",\n  :url\n  \"http://www.quora.com/Computer-Science-Education/How-do-you-ensure-that-TAs-for-introductory-CS-classes-teach-at-a-high-quality\",\n  :url_title\n  \"&lt;strong&gt;Quora&lt;/strong&gt; - Computer Science Education - How do you ensure that TAs for introductory CS classes teach at ... \"}\n {:c 13,\n  :display_url\n  \"quora.com/.../Is-it-already-too-late-to-get-on-the-wave-of-f...\",\n  :n_group 53,\n  :short_host \"quora.com\",\n  :short_host_url \"http://www.quora.com/\",\n  :snippet\n  \"If I were to start learning Scala and the functional programming paradigm (coming from imperative languages), am I getting early or late to the party.  I&amp;#39;m a functional learner myself.\",\n  :url\n  \"http://www.quora.com/Scala/Is-it-already-too-late-to-get-on-the-wave-of-functional-programming-and-Scala\",\n  :url_title\n  \"&lt;strong&gt;Quora&lt;/strong&gt; \n- Is it already too late to get on the wave of functional programming and Scala\"}\n {:c 14,\n  :display_url \"python.org/doc/3.0.1/about.html\",\n  :n_group 54,\n  :short_host \"python.org\",\n  :short_host_url \"http://www.python.org/\",\n  :snippet\n  \"Contributors to the Python Documentation.  About these documents.  These documents are generated from reStructuredText sources by Sphinx, a document processor specifically written for the Python documentation.\",\n  :url \"http://www.python.org/doc/3.0.1/about.html\",\n  :url_title\n  \"&lt;strong&gt;Python Programming Language&lt;/strong&gt; - About these documents — Python v3.0.1 documentation\"}]</code></pre>\n\n<p>Anyway, thought it might be useful (even though blekko&rsquo;s gone and nuked free access to their API).</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-03-17-the-tw-idf-model.md" . unix) f post (u . "The TW-IDF Model") (? . 27) 1395077821 (p+ #"/Users/shriphani/blog/2014/03/17/the-tw-idf-model/index.html" . unix) "/2014/03/17/the-tw-idf-model/" (u . "2014-03-17T13:30:35") (? . 5) (? . 19) (c (u . "cikm") c (u . "paper") c (u . "")) (u . "\n<p>I found this recent paper on adhoc-IR from CIKM 2013. I haven&rsquo;t worked in this area but the results seem promising. Essentially, instead of TF, you store an indegree count. The graph in question is the term co-occurrence graph within a window with the direction indicating word-order. The paper won hon. mention at the CIKM so it is clearly very cool.</p>\n\n<p><a href=\"http://www.lix.polytechnique.fr/~rousseau/papers/rousseau-cikm2013.pdf\">Link to paper</a></p>") #f (u . "\n<p>I found this recent paper on adhoc-IR from CIKM 2013. I haven&rsquo;t worked in this area but the results seem promising. Essentially, instead of TF, you store an indegree count. The graph in question is the term co-occurrence graph within a window with the direction indicating word-order. The paper won hon. mention at the CIKM so it is clearly very cool.</p>\n\n<p><a href=\"http://www.lix.polytechnique.fr/~rousseau/papers/rousseau-cikm2013.pdf\">Link to paper</a></p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-08-31-the-rothko.md" . unix) f post (u . "The Rothko") (? . 6) 1409555015 (p+ #"/Users/shriphani/blog/2014/08/31/the-rothko/index.html" . unix) "/2014/08/31/the-rothko/" (u . "2014-08-31T15:41:32") (? . 35) (? . 7) (c (u . "art") c (u . "thoughts")) (u . "\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/c/cb/Rothko_No_14.jpg\" alt=\"No. 14 at SF Moma\" /></p>\n\n<p>For over five centuries the Sistine Chapel ceiling has been among the greatest things man has produced. I would give two limbs for a magnum opus of its caliber.</p>\n\n<p>In contrast, the first time I saw a Rothko in my early teens, I concluded that this was the outcome of giving a child with severe OCD a set of crayons.</p>\n\n<p>Over the last few weeks, amidst a very tough and frustrating period (this is far too complex for this one post) in my life, I had a chance to reflect on one of Rothko&rsquo;s signature pieces and study the underlying process through a MOMA video [1]. I felt a new sense of respect for Rothko&rsquo;s works. A Rothko is quite literally a metaphor for life. Our visible exterior is the product of several layers that comprise our experiences.</p>\n\n<p>Rothko had a famous quote:</p>\n\n<blockquote>\n <p>The people who weep before my pictures are having the same religious experience I had when I painted them.</p></blockquote>\n\n<p>It took eight years for me to have this experience. I am better off for it.</p>\n\n<p>[1] <em><a href=\"http://www.moma.org/explore/multimedia/videos/123/689\">The Painting Techniques of Mark Rothko: No. 16 (Red, Brown, and Black)</a></em></p>") #f (u . "\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/c/cb/Rothko_No_14.jpg\" alt=\"No. 14 at SF Moma\" /></p>\n\n<p>For over five centuries the Sistine Chapel ceiling has been among the greatest things man has produced. I would give two limbs for a magnum opus of its caliber.</p>\n\n<p>In contrast, the first time I saw a Rothko in my early teens, I concluded that this was the outcome of giving a child with severe OCD a set of crayons.</p>\n\n<p>Over the last few weeks, amidst a very tough and frustrating period (this is far too complex for this one post) in my life, I had a chance to reflect on one of Rothko&rsquo;s signature pieces and study the underlying process through a MOMA video [1]. I felt a new sense of respect for Rothko&rsquo;s works. A Rothko is quite literally a metaphor for life. Our visible exterior is the product of several layers that comprise our experiences.</p>\n\n<p>Rothko had a famous quote:</p>\n\n<blockquote>\n <p>The people who weep before my pictures are having the same religious experience I had when I painted them.</p></blockquote>\n\n<p>It took eight years for me to have this experience. I am better off for it.</p>\n\n<p>[1] <em><a href=\"http://www.moma.org/explore/multimedia/videos/123/689\">The Painting Techniques of Mark Rothko: No. 16 (Red, Brown, and Black)</a></em></p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-07-22-the-percolator-paper.md" . unix) f post (u . "The Percolator Paper") (? . 32) 1379088315 (p+ #"/Users/shriphani/blog/2013/07/24/the-percolator-paper/index.html" . unix) "/2013/07/24/the-percolator-paper/" (u . "2013-07-24T18:54:28") (? . 30) (? . 37) (c (u . "reading") c (u . "paper") c (u . "percolator") c (u . "google-research") c (u . "map-reduce")) (u . "\n<p>In the IR reading group this week I decided to read the Percolator paper from Google[1]. It caused quite a stir on several news-reading sites after a Google Research blog-post on the topic. Since I&rsquo;ve never had the chance to read it, this is as good a time as any. <strong>This is not a comprehensive summary at all and lots of results here are hand-wavy. If you want to instruct yourself, please read the paper.</strong></p>") #t (u . "\n<p>In the IR reading group this week I decided to read the Percolator paper from Google[1]. It caused quite a stir on several news-reading sites after a Google Research blog-post on the topic. Since I&rsquo;ve never had the chance to read it, this is as good a time as any. <strong>This is not a comprehensive summary at all and lots of results here are hand-wavy. If you want to instruct yourself, please read the paper.</strong></p>\n<!-- more-->\n\n<h2 id=\"setting\">Setting</h2>\n\n<p>Index updates involve making several small updates to a large data store. Map-Reduce and batch-processing systems aim for ammortized efficiency and index updates do not lend themselves well to this category.</p>\n\n<h3 id=\"index-construction\">Index Construction:</h3>\n\n<p>Index construction can be summarized as accessing every page on the web and processing these pages while keeping track of invariants.</p>\n\n<p>If we were to structure this as a collection of MapReduce tasks, in a sequence of jobs, we identify duplicates, invert links and finally come to the task of building the index itself (this is the task of index construction - I will not deal with it here).</p>\n\n<p>If we would like to process a small batch of documents and then update our index, we can see that the task of link-inversion would require a batch job over the entire newer repository. As such this system doesn&rsquo;t lend itself to processing jobs in small batches. Percolator exists to solve this problem.</p>\n\n<h2 id=\"percolator\">Percolator</h2>\n\n<p>Percolator provides us:</p>\n\n<ul>\n <li>random access to the data repository</li>\n <li>strong consistency guarantees</li></ul>\n\n<p>Its components are:</p>\n\n<h3 id=\"bigtable\">BigTable:</h3>\n\n<p>This is used to store structured data designed to scale. It is not a fully relational database but allows control over the underlying data model.</p>\n\n<p>The data is indexed using row and column names (this is up to the application). The cells store strings (these are not interpreted so you can marshall objects here).</p>\n\n<p>An example of an object in BigTable is:</p>\n\n<script src=\"https://gist.github.com/shriphani/6073308.js\"></script>\n\n<p>So, the row-key there was the domain (written out in the inverse format the RFC allows). The column-keys shown are the contents and an anchor (the keys are arbitrary and up to us).</p>\n\n<p><strong>Rows:</strong> Data is stored in sorted order (lexicographic) of <strong>row-keys</strong>. Tablets are row-ranges and these are distributed across machines. Locality is to be achieved by keeping closely associated items within a tablet.</p>\n\n<p><strong>Columns:</strong> Column keys are grouped into column families. The same type of data is stored in a family. Access control happens here.</p>\n\n<p>This also allows applications of various kinds (read-intensive v. write-intensive or privacy-preserving).</p>\n\n<p><strong>Timestamps:</strong> Versioning of data is achieved using timestamps. For example, we store the CNN homepage at different timestamps.</p>\n\n<p><strong>Transactions:</strong> ACID guarantees are provided. <code>commit()</code> and <code>get()</code> are blocking. Thread pools are used for parallel access. Reads don&rsquo;t require locking.</p>\n\n<p>Locking is implemented in Percolator itself as opposed to BigTable. This locking mechanism is stored in BigTable as well (particularly in in-memory columns).</p>\n\n<p>The timestamp oracle (my guess is that this is like zookeeper) determines the start time of a transaction and thus determines what snapshot a <code>get()</code> request sees. <code>set()</code> requests are buffered until a commit.</p>\n\n<p>The <code>commit()</code> procedure is:</p>\n\n<ul>\n <li>Lock all the cells being written.</li>\n <li><code>write-write</code> locks occur when a new write lock is obtained after the current write transaction has started (and is ongoing). The snapshot isolation prevents this.</li>\n <li>Any other lock seen results in an abort of the <code>commit</code>.</li>\n <li>If there is no conflict, write the lock and the data to the corresponding cell.</li>\n <li>Then obtain a commit timestamp and make the write visible to readers by replacing the lock with a write record.</li></ul>\n\n<p>In the event of client failure, locks are left behind and need to be cleaned up. A primary lock is used and if a crash has occurred the primary lock can be used to determine a crash of a previous transaction and thus the locks can be discarded.</p>\n\n<p><strong>Timestamp Oracle:</strong> This is a server that hands out timestamps (so zookeeper? or whatever Google uses - It&rsquo;s called Chubby I think).</p>\n\n<h3 id=\"triggers\">Triggers</h3>\n\n<p>Percolator has a mechanism for triggering and running transactions. A set of observer binaries register a thunk with columns that get called upon an update. Percolator applications are structured like these.</p>\n\n<h2 id=\"performance\">Performance</h2>\n\n<p>MapReduce involves one bulk read from the GFS which Percolator performs 50 operations per document resulting in a lot of RPCs.</p>\n\n<p>Commits also require RPCs and to reduce this count transactions involving one column are batched together and performed in 1 RPC.</p>\n\n<p>The same batching is used to serve <code>read()</code> requests as well. Pre-fetching is another optimization that is aimed at making use of locality (in terms of the columns involved) in requests.</p>\n\n<p>A newly crawled document enters the searchable index faster using Percolator than when using MapReduce.</p>\n\n<p>Since the document enters the index quicker:</p>\n\n<ul>\n <li>The index can grow larger (no need to process the index as-is every single time).</li>\n <li>The corpus is fresher (documents don&rsquo;t spend days in the sequence of MapReduce jobs).</li>\n <li>There is an increase in resources used but the gains are greater than they would have been using MapReduce.</li></ul>\n\n<p>At extremely high crawl rates, it is more efficient to use MapReduce but real systems exhibit crawl rates that make Percolator a better choice than MapReduce.</p>\n\n<p>Percolator is an implementation on top of BigTable so it is marginally slower than BigTable operations.</p>\n\n<p>The paper also provided results using the TPC-E benchmark [2] - Percolator is <strong>3x</strong> better than the leader of the TPC-E board (although I am not sure if these numbers mean anything). This comes at the cost of a 30-fold overhead and this is a (potential) area of improvement.</p>\n\n<p>[1] <a href=\"http://research.google.com/pubs/pub36726.html\">http://research.google.com/pubs/pub36726.html</a></p>\n\n<p>[2] <a href=\"http://www.tpc.org/default.asp\">http://www.tpc.org/default.asp</a></p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-07-13-fast-dates-parser.md" . unix) f post (u . "Fast dates parser") (? . 10) 1379088315 (p+ #"/Users/shriphani/blog/2013/07/13/fast-dates-parser/index.html" . unix) "/2013/07/13/fast-dates-parser/" (u . "2013-07-13T23:12:59") (? . 9) (? . 31) (c (u . "research") c (u . "clueweb12++") c (u . "data processing")) (u . "\n<p>The Clueweb12++ crawl aims at accumulating social media content from the Clueweb crawl&rsquo;s time frame. Our pipeline thus far was as follows:</p>\n\n<ol>\n <li>Download a bunch of index pages from forums (index pages link to threads).</li>\n <li>Identify posts that fall in the time-frame specified.</li>\n <li>Download posts and recreate web-graph to give the impression of a crawl completed in the 2012 time-frame.</li></ol>\n\n<p>There is one complicated time-frame in this setup - step 2. Dates processing is a nuisance that I would not wish upon anyone else. There are an innumerable number of surface representations (that can be ambiguous) and to add to our troubles, people do stuff like use &ldquo;Last Week&rdquo; to indicate time of activity.</p>\n\n<p>The most accurate tool is SUTime but on a crawl the size of ClueWeb, it is foolish to run such a crawl on it. So what we do is use <a href=\"http://natty.joestelmach.com/\">Natty</a>. Natty is fast and reasonably accurate.</p>\n\n<p>I&rsquo;ve uploaded a java module to github that will spit out a list of dates. You can obtain it <a href=\"https://github.com/lemurproject/clueweb12pp-core/tree/master/pageTimes\">here</a>.</p>") #f (u . "\n<p>The Clueweb12++ crawl aims at accumulating social media content from the Clueweb crawl&rsquo;s time frame. Our pipeline thus far was as follows:</p>\n\n<ol>\n <li>Download a bunch of index pages from forums (index pages link to threads).</li>\n <li>Identify posts that fall in the time-frame specified.</li>\n <li>Download posts and recreate web-graph to give the impression of a crawl completed in the 2012 time-frame.</li></ol>\n\n<p>There is one complicated time-frame in this setup - step 2. Dates processing is a nuisance that I would not wish upon anyone else. There are an innumerable number of surface representations (that can be ambiguous) and to add to our troubles, people do stuff like use &ldquo;Last Week&rdquo; to indicate time of activity.</p>\n\n<p>The most accurate tool is SUTime but on a crawl the size of ClueWeb, it is foolish to run such a crawl on it. So what we do is use <a href=\"http://natty.joestelmach.com/\">Natty</a>. Natty is fast and reasonably accurate.</p>\n\n<p>I&rsquo;ve uploaded a java module to github that will spit out a list of dates. You can obtain it <a href=\"https://github.com/lemurproject/clueweb12pp-core/tree/master/pageTimes\">here</a>.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-06-09-disco-dora-maar.md" . unix) f post (u . "Disco Dora Maar") (? . 8) 1402346766 (p+ #"/Users/shriphani/blog/2014/06/09/disco-dora-maar/index.html" . unix) "/2014/06/09/disco-dora-maar/" (u . "2014-06-09T16:45:02") (? . 2) (? . 16) (c (u . "quil") c (u . "art")) (u . "\n<p>Disco Dora Maar, made with <a href=\"https://github.com/quil/quil\">Quil</a> and Clojure.</p>\n\n<p><img src=\"https://raw.githubusercontent.com/shriphani/art/master/disco_dora_maar/disco_dora_maar.gif\" alt=\"Disco Dora Maar\" /></p>") #f (u . "\n<p>Disco Dora Maar, made with <a href=\"https://github.com/quil/quil\">Quil</a> and Clojure.</p>\n\n<p><img src=\"https://raw.githubusercontent.com/shriphani/art/master/disco_dora_maar/disco_dora_maar.gif\" alt=\"Disco Dora Maar\" /></p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-07-13-new-blog.md" . unix) f post (u . "New Blog") (? . 9) 1379088315 (p+ #"/Users/shriphani/blog/2013/07/13/new-blog/index.html" . unix) "/2013/07/13/new-blog/" (u . "2013-07-13T20:22:03") #f (? . 10) (c (u . "hello")) (u . "\n<p>This is my new blogging spot. The plan is to stop blogging from a WYSIWYG editor in the browser that isn&rsquo;t really applicable to the kind of blogging I want to do and to move to a static generator</p>") #f (u . "\n<p>This is my new blogging spot. The plan is to stop blogging from a WYSIWYG editor in the browser that isn&rsquo;t really applicable to the kind of blogging I want to do and to move to a static generator</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-12-26-the-sistine-chapel.md" . unix) f post (u . "The Sistine Chapel") (? . 1) 1388036318 (p+ #"/Users/shriphani/blog/2013/12/26/the-sistine-chapel/index.html" . unix) "/2013/12/26/the-sistine-chapel/" (u . "2013-12-26T00:28:19") (? . 11) (? . 12) (c (u . "michelangelo") c (u . "buonarotti") c (u . "michelangelo-buonarotti") c (u . "")) (u . "\n<p>The Vatican has a fantastic interactive view of Michelangelo’s work in the Sistine Chapel.</p>\n\n<p><a href=\"http://www.vatican.va/various/cappelle/sistina_vr/\"><img src=\"sistine_chapel.png\" width=\"500px\" /></a></p>") #f (u . "\n<p>The Vatican has a fantastic interactive view of Michelangelo’s work in the Sistine Chapel.</p>\n\n<p><a href=\"http://www.vatican.va/various/cappelle/sistina_vr/\"><img src=\"sistine_chapel.png\" width=\"500px\" /></a></p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-11-27-the-story-of-phineas-gage.md" . unix) f post (u . "The Story of Phineas Gage") (? . 21) 1385529496 (p+ #"/Users/shriphani/blog/2013/11/27/the-story-of-phineas-gage/index.html" . unix) "/2013/11/27/the-story-of-phineas-gage/" (u . "2013-11-27T00:00:26") (? . 13) (? . 20) (c (u . "phrenology") c (u . "phineas-gage") c (u . "psychology")) (u . "\n<p>I first encountered the story of Phineas Gage in my freshman year in college. Phineas had a projectile drill a hole in his head (while he worked the railroad) and he survived the incident. The incident caused a massive personality change in Phineas and conclusively ruled out <a href=\"http://en.wikipedia.org/wiki/Phrenology\">phrenology</a> as a reasonable model of how the brain worked.</p>\n\n<p>After the incident Phineas&rsquo; life comprised a trip to South America, a gig at P.T. Barnum&rsquo;s establishment and a massive change in our understanding of the brain. This <a href=\"http://en.wikipedia.org/wiki/Phineas_Gage\">wikipedia article</a> covers a good chunk of this work.</p>") #f (u . "\n<p>I first encountered the story of Phineas Gage in my freshman year in college. Phineas had a projectile drill a hole in his head (while he worked the railroad) and he survived the incident. The incident caused a massive personality change in Phineas and conclusively ruled out <a href=\"http://en.wikipedia.org/wiki/Phrenology\">phrenology</a> as a reasonable model of how the brain worked.</p>\n\n<p>After the incident Phineas&rsquo; life comprised a trip to South America, a gig at P.T. Barnum&rsquo;s establishment and a massive change in our understanding of the brain. This <a href=\"http://en.wikipedia.org/wiki/Phineas_Gage\">wikipedia article</a> covers a good chunk of this work.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-04-20-watch-date-change-mechanism.md" . unix) f post (u . "Watch Date Change Mechanism") (? . 14) 1398048541 (p+ #"/Users/shriphani/blog/2014/04/20/watch-date-change-mechanism/index.html" . unix) "/2014/04/20/watch-date-change-mechanism/" (u . "2014-04-20T22:42:15") (? . 18) (? . 15) (c (u . "watches") c (u . "pictures") c (u . "date-change")) (u . "\n<p>Someone on <a href=\"http://reddit.com/r/watches\">r/watches</a> posted this image of a date-change mechanism that illustrates why you shouldn&rsquo;t change the date close to midnight:</p>\n\n<p>\n <li><img src=\"http://i.imgur.com/tyiRx68.jpg\" /></li> \n <li><img src=\"http://i.imgur.com/twU4Ywt.jpg\" /></li> \n <li><img src=\"http://i.imgur.com/K34Tjck.jpg\" /></li> \n <li><img src=\"http://i.imgur.com/EduGQMW.jpg\" /></li></p>") #f (u . "\n<p>Someone on <a href=\"http://reddit.com/r/watches\">r/watches</a> posted this image of a date-change mechanism that illustrates why you shouldn&rsquo;t change the date close to midnight:</p>\n\n<p>\n <li><img src=\"http://i.imgur.com/tyiRx68.jpg\" /></li> \n <li><img src=\"http://i.imgur.com/twU4Ywt.jpg\" /></li> \n <li><img src=\"http://i.imgur.com/K34Tjck.jpg\" /></li> \n <li><img src=\"http://i.imgur.com/EduGQMW.jpg\" /></li></p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-06-23-subotai-data-mining-for-html-documents.md" . unix) f post (u . "Subotai: Data Mining for HTML Documents") (? . 16) 1403577141 (p+ #"/Users/shriphani/blog/2014/06/24/subotai-data-mining-for-html-documents/index.html" . unix) "/2014/06/24/subotai-data-mining-for-html-documents/" (u . "2014-06-24T10:32:27") (? . 8) (? . 22) (c (u . "clojure") c (u . "html") c (u . "data-mining") c (u . "near-duplicate-detection") c (u . "structural-similarity")) (u . "\n<p>I spent the last few months studying and implementing some routines that take a raw HTML document (or documents) and do stuff with it (them). <a href=\"https://github.com/shriphani/subotai\">Subotai</a> is a library that consolidates some of these routines. In this blog post I will describe what is currently implemented and what the roadmap is.</p>") #t (u . "\n<p>I spent the last few months studying and implementing some routines that take a raw HTML document (or documents) and do stuff with it (them). <a href=\"https://github.com/shriphani/subotai\">Subotai</a> is a library that consolidates some of these routines. In this blog post I will describe what is currently implemented and what the roadmap is.</p>\n<!-- more-->\n\n<h2 id=\"structural-similarity\">Structural Similarity</h2>\n\n<p>Dynamic web-pages are built by populating templates and thus two pages that look the same, possibly share the same underlying template. Structural similarity measures the similarity of the underlying templates. Subotai contains an implementation of the Restricted Top-Down Mapping algorithm (which I shall call RTDM) - a dynamic programming algorithm which measures the Tree-Edit-Distance (rather like its cousin that works on strings). You can use the subotai implementation like so:</p>\n\n<p>For the following two documents (which clearly look the same and as we can guess use the same underlying HTML template):</p>\n\n<table>\n <tr>\n  <td><img src=\"/img/blog_page_1.png\" style=\"display:inline\" /></td> \t \n  <td><img src=\"/img/blog_page_2.png\" style=\"display:inline\" /></td></tr></table>\n\n<p>you can do this with Subotai:</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">&#39;clj-http.client</span><span class=\"p\">)</span>\n<span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">&#39;subotai.structural-similarity.core</span> <span class=\"ss\">:reload</span><span class=\"p\">)</span>\n<span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">bod1</span> <span class=\"p\">(</span><span class=\"ss\">:body</span> <span class=\"p\">(</span><span class=\"nb\">get </span><span class=\"s\">\"http://blog.shriphani.com/\"</span><span class=\"p\">)))</span> <span class=\"c1\">; this is page 1</span>\n<span class=\"o\">#</span><span class=\"ss\">&#39;user/bod1</span>\n<span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">bod2</span> <span class=\"p\">(</span><span class=\"ss\">:body</span> <span class=\"p\">(</span><span class=\"nb\">get </span><span class=\"s\">\"http://blog.shriphani.com/index-2.html\"</span><span class=\"p\">)))</span> <span class=\"c1\">; this is page 2</span>\n<span class=\"o\">#</span><span class=\"ss\">&#39;user/bod2</span>\n<span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">similar?</span> <span class=\"nv\">bod1</span> <span class=\"nv\">bod2</span><span class=\"p\">)</span>\n<span class=\"nv\">true</span> <span class=\"c1\">; both pages have the same structure</span>\n<span class=\"nv\">user=&gt;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"near-duplicate-detection\">Near-Duplicate Detection</h2>\n\n<p>One can often find pages on the web that are near duplicates of each other - for instance a page on a site mirror vs the actual destination. I have an example here of two web-pages that are not identical but near-identical: <a href=\"http://www.kidneyspace.com/index.php/topic,5286.msg30719.html\">the first</a> and <a href=\"http://www.kidneyspace.com/index.php/topic,5286\">the second</a>.</p>\n\n<p>The two documents differ in the templating slightly and have dates and other meta content that is slightly different. You can test it using:</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"nv\">user&gt;</span> <span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">&#39;clj-http.client</span><span class=\"p\">)</span>\n<span class=\"nv\">WARNING</span><span class=\"err\">:</span> <span class=\"nb\">get </span><span class=\"nv\">already</span> <span class=\"nv\">refers</span> <span class=\"nv\">to</span><span class=\"err\">:</span> <span class=\"o\">#</span><span class=\"ss\">&#39;clojure.core/get</span> <span class=\"nv\">in</span> <span class=\"nv\">namespace</span><span class=\"err\">:</span> <span class=\"nv\">user</span>,\n<span class=\"nv\">being</span> <span class=\"nv\">replaced</span> <span class=\"nv\">by</span><span class=\"err\">:</span> <span class=\"o\">#</span><span class=\"ss\">&#39;clj-http.client/get</span>\n<span class=\"nv\">user&gt;</span> <span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">&#39;subotai.near-duplicate.core</span> <span class=\"ss\">:reload</span><span class=\"p\">)</span>\n<span class=\"nv\">user&gt;</span> <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">b2</span> <span class=\"p\">(</span><span class=\"ss\">:body</span> <span class=\"p\">(</span><span class=\"nb\">get </span><span class=\"s\">\"http://www.kidneyspace.com/index.php/topic,5286.msg30719.html\"</span><span class=\"p\">)))</span>\n<span class=\"o\">#</span><span class=\"ss\">&#39;user/b2</span>\n<span class=\"nv\">user&gt;</span> <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">b1</span> <span class=\"p\">(</span><span class=\"ss\">:body</span> <span class=\"p\">(</span><span class=\"nb\">get </span><span class=\"s\">\"http://www.kidneyspace.com/index.php/topic,5286\"</span><span class=\"p\">)))</span>\n<span class=\"o\">#</span><span class=\"ss\">&#39;user/b1</span>\n<span class=\"nv\">user&gt;</span> <span class=\"p\">(</span><span class=\"nf\">near-duplicate-html?</span> <span class=\"nv\">b1</span> <span class=\"nv\">b2</span><span class=\"p\">)</span>\n<span class=\"nv\">true</span>\n<span class=\"nv\">user&gt;</span> \n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"links\">Links</h2>\n\n<p>The github project page: <a href=\"https://github.com/shriphani/subotai\">[github: Subotai]</a></p>\n\n<p>PDFs of the papers implemented: <a href=\"https://github.com/shriphani/subotai/tree/master/doc\">[github: Papers]</a></p>\n\n<h2 id=\"pipeline\">Pipeline</h2>\n\n<p>Next, I want to implement record detection (automatically figuring out different reviews on an amazon product page for instance).</p>\n\n<p>The thresholds used are picked from papers or 2-fold cross validation. I will move that codebase into Subotai later.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-09-21-obituary-mandolin-srinivas.md" . unix) f post (u . "Obituary: Mandolin Srinivas") (? . 17) 1411336122 (p+ #"/Users/shriphani/blog/2014/09/21/obituary-mandolin-srinivas/index.html" . unix) "/2014/09/21/obituary-mandolin-srinivas/" (u . "2014-09-21T17:41:28") (? . 7) (? . 41) (c (u . "obituary") c (u . "mandolin") c (u . "heroes")) (u . "\n<p>One of my personal heroes, <a href=\"http://www.wikiwand.com/en/U._Srinivas\">Uppalapu &ldquo;Mandolin&rdquo; Srinivas</a>, breathed his last this past week. This particular album by him was my favorite:</p>\n\n<iframe style=\"text-align:center;\" src=\"https://embed.spotify.com/?uri=https://play.spotify.com/album/5ac1lJALBO8CZ0yjneBzyz\" width=\"300\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\"></iframe>") #f (u . "\n<p>One of my personal heroes, <a href=\"http://www.wikiwand.com/en/U._Srinivas\">Uppalapu &ldquo;Mandolin&rdquo; Srinivas</a>, breathed his last this past week. This particular album by him was my favorite:</p>\n\n<iframe style=\"text-align:center;\" src=\"https://embed.spotify.com/?uri=https://play.spotify.com/album/5ac1lJALBO8CZ0yjneBzyz\" width=\"300\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\"></iframe>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-04-12-fertitlity-rates-and-prosperity.md" . unix) f post (u . "Fertitlity Rates and Prosperity") (? . 18) 1397335677 (p+ #"/Users/shriphani/blog/2014/04/12/fertitlity-rates-and-prosperity/index.html" . unix) "/2014/04/12/fertitlity-rates-and-prosperity/" (u . "2014-04-12T16:04:12") (? . 19) (? . 14) (c (u . "fertility-rates") c (u . "gdp") c (u . "visualization")) (u . "\n<p>Singapore&rsquo;s government (and Mentos was involved in this awkward project) used <a href=\"https://www.youtube.com/watch?v=8jxU89x78ac\">this ad</a> on their National Day celebrations to encourage people to copulate and increase Singapore&rsquo;s birth rate. I hypothesized that a low fertility rate (number of children per woman) was not unique to Singapore (though the problem might be more acute in Singapore).</p>\n\n<p>Here&rsquo;s a plot of GDP vs. fertility rates for all nations. The red dots are the devloped countries:</p>\n\n<p><img src=\"/img/gdp_vs_fertility.png\" /></p>\n\n<p>Clearly the poorest nations have a ridiculously high fertility rate. The red dots represent the developed economies - almost all of which lie below the <a href=\"http://en.wikipedia.org/wiki/Sub-replacement_fertility\">replacement fertility rate</a> of 2.1</p>\n\n<p>Here&rsquo;s a plot of just the developed economies:</p>\n\n<p><img src=\"/img/gdp_vs_fertility-developed.png\" /></p>\n\n<p>And a similar plot for developed Asian economies:</p>\n\n<p><img src=\"/img/gdp_vs_fertility-asian-tiger.png\" /></p>\n\n<p>Full source code and datasets available in <a href=\"https://github.com/shriphani/cpi-vis\">this github repo</a>.</p>") #f (u . "\n<p>Singapore&rsquo;s government (and Mentos was involved in this awkward project) used <a href=\"https://www.youtube.com/watch?v=8jxU89x78ac\">this ad</a> on their National Day celebrations to encourage people to copulate and increase Singapore&rsquo;s birth rate. I hypothesized that a low fertility rate (number of children per woman) was not unique to Singapore (though the problem might be more acute in Singapore).</p>\n\n<p>Here&rsquo;s a plot of GDP vs. fertility rates for all nations. The red dots are the devloped countries:</p>\n\n<p><img src=\"/img/gdp_vs_fertility.png\" /></p>\n\n<p>Clearly the poorest nations have a ridiculously high fertility rate. The red dots represent the developed economies - almost all of which lie below the <a href=\"http://en.wikipedia.org/wiki/Sub-replacement_fertility\">replacement fertility rate</a> of 2.1</p>\n\n<p>Here&rsquo;s a plot of just the developed economies:</p>\n\n<p><img src=\"/img/gdp_vs_fertility-developed.png\" /></p>\n\n<p>And a similar plot for developed Asian economies:</p>\n\n<p><img src=\"/img/gdp_vs_fertility-asian-tiger.png\" /></p>\n\n<p>Full source code and datasets available in <a href=\"https://github.com/shriphani/cpi-vis\">this github repo</a>.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-11-29-a-comment-on-dimension-estimation.md" . unix) f post (u . "A Comment on Dimension-Estimation") (? . 20) 1385848835 (p+ #"/Users/shriphani/blog/2013/11/29/a-comment-on-dimension-estimation/index.html" . unix) "/2013/11/29/a-comment-on-dimension-estimation/" (u . "2013-11-29T23:49:33") (? . 21) (? . 40) (c (u . "dimension-reduction") c (u . "dimension") c (u . "grassberger-procaccia") c (u . "k-nn-classifier")) (u . "\n<p>I saw this neat comment in a paper I was recently reading. If you have all <code>i.i.d</code> features and you want to estimate its dimension using Grassberger-Procaccia (which estimates dimension using a distance-based metric) or want to classify using a k-NN classifier, it is bad if the data points are mostly pairwise equidistant (for instance, a correlation integral plot will look like a step function and thus will be useless; a k-NN classifier will break because the test point ends up equidistant from all the existing points).</p>\n\n<p>There is a trivial argument using the Hoeffding bound in Chris Burges&rsquo; <a href=\"http://research.microsoft.com/en-us/um/people/cburges/tech_reports/msr-tr-2009-2013.pdf\">paper</a> that suggests that if the features are all <code>i.i.d</code>, a majority of pairwise distances will end up clustered tightly around a mean which means that k-NN or Grassberger-Procaccia won&rsquo;t work well. I am going to repeat this argument here so I can remember it for later:</p>\n\n<p>Our vectors are of dimension $ d $ and the components are $ \\pm1 $. Assuming all the components are $ iid $, the Hoeffding bound gives us:</p>\n\n<p>$$ P(||| x<em>{1} - x</em>{2} ||^{2} &ndash; 2d| &gt; d\\epsilon) = P(| x<em>{1} \\cdot x</em>{2} | &gt; d\\epsilon/2) \\le 2exp(-\\frac{d\\epsilon^2}{8})$$</p>\n\n<p>and this shows us that most pairwise distances will end up clustered very tightly around a mean and this means that a majority of pairs of points in the dataset will end up equidistant and thus a $ k-NN $ classifier will fail.</p>\n\n<p>This also means that the correlation integral is a good way to determine if a k-NN classifier will work well. If the plot resembles a spike, the distance function needs to change.</p>\n\n<p>The correlation-integral is an immensely powerful tool and <a href=\"https://github.com/shriphani/clj-dimension/blob/master/src/clj_dimension/estimation/correlation_integral.clj\">here&rsquo;s</a> an implementation</p>") #f (u . "\n<p>I saw this neat comment in a paper I was recently reading. If you have all <code>i.i.d</code> features and you want to estimate its dimension using Grassberger-Procaccia (which estimates dimension using a distance-based metric) or want to classify using a k-NN classifier, it is bad if the data points are mostly pairwise equidistant (for instance, a correlation integral plot will look like a step function and thus will be useless; a k-NN classifier will break because the test point ends up equidistant from all the existing points).</p>\n\n<p>There is a trivial argument using the Hoeffding bound in Chris Burges&rsquo; <a href=\"http://research.microsoft.com/en-us/um/people/cburges/tech_reports/msr-tr-2009-2013.pdf\">paper</a> that suggests that if the features are all <code>i.i.d</code>, a majority of pairwise distances will end up clustered tightly around a mean which means that k-NN or Grassberger-Procaccia won&rsquo;t work well. I am going to repeat this argument here so I can remember it for later:</p>\n\n<p>Our vectors are of dimension $ d $ and the components are $ \\pm1 $. Assuming all the components are $ iid $, the Hoeffding bound gives us:</p>\n\n<p>$$ P(||| x<em>{1} - x</em>{2} ||^{2} &ndash; 2d| &gt; d\\epsilon) = P(| x<em>{1} \\cdot x</em>{2} | &gt; d\\epsilon/2) \\le 2exp(-\\frac{d\\epsilon^2}{8})$$</p>\n\n<p>and this shows us that most pairwise distances will end up clustered very tightly around a mean and this means that a majority of pairs of points in the dataset will end up equidistant and thus a $ k-NN $ classifier will fail.</p>\n\n<p>This also means that the correlation integral is a good way to determine if a k-NN classifier will work well. If the plot resembles a spike, the distance function needs to change.</p>\n\n<p>The correlation-integral is an immensely powerful tool and <a href=\"https://github.com/shriphani/clj-dimension/blob/master/src/clj_dimension/estimation/correlation_integral.clj\">here&rsquo;s</a> an implementation</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-08-16-on-empires.md" . unix) f post (u . "On Empires") (? . 34) 1408220201 (p+ #"/Users/shriphani/blog/2014/08/16/on-empires/index.html" . unix) "/2014/08/16/on-empires/" (u . "2014-08-16T16:14:06") (? . 22) (? . 33) (c (u . "quotes") c (u . "books") c (u . "reading")) (u . "\n<blockquote>\n <p>It is the desperate moment when we discover that this empire which had seemed to us the sum of all wonders, is an endless, formless ruin, that corruption&rsquo;s gangrene has spread too far to be healed by our scepter, that the triumph over enemy sovereigns has made us the heirs of their long undoing.</p></blockquote>\n\n<p>&mdash; Invisible Cities (Italo Calvino)</p>") #t (u . "\n<blockquote>\n <p>It is the desperate moment when we discover that this empire which had seemed to us the sum of all wonders, is an endless, formless ruin, that corruption&rsquo;s gangrene has spread too far to be healed by our scepter, that the triumph over enemy sovereigns has made us the heirs of their long undoing.</p></blockquote>\n\n<p>&mdash; Invisible Cities (Italo Calvino)</p>\n<!-- more-->")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-05-16-augmenting-enlive.md" . unix) f post (u . "Augmenting enlive") (? . 23) 1400220518 (p+ #"/Users/shriphani/blog/2014/05/16/augmenting-enlive/index.html" . unix) "/2014/05/16/augmenting-enlive/" (u . "2014-05-16T01:14:56") (? . 24) (? . 25) (c (u . "clojure") c (u . "enlive") c (u . "htmlcleaner") c (u . "scraping")) (u . "\n<p>In manipulating HTML documents for features, I find myself needing to use some operations all the time - removing script tags, comments and the like. This feature-set is available in HtmlCleaner and I thus merged the two libraries to produce <code>enlive-helper</code>.</p>\n\n<p>Now you can do:</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"nf\">html-resource-steroids</span> \n <span class=\"p\">(</span><span class=\"nf\">java.io.StringReader.</span> <span class=\"s\">\"&lt;html&gt;&lt;body&gt;&lt;a&gt;hi&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;\"</span><span class=\"p\">)</span> \n <span class=\"ss\">:prune-tags</span> <span class=\"s\">\"a\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And as a result the <code>a</code> tag is not picked up:</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">({</span><span class=\"ss\">:tag</span> <span class=\"ss\">:html</span>,\n  <span class=\"ss\">:attrs</span> <span class=\"nv\">nil</span>,\n  <span class=\"ss\">:content</span>\n  <span class=\"p\">(</span><span class=\"s\">\"\\n\"</span>\n   <span class=\"p\">{</span><span class=\"ss\">:tag</span> <span class=\"ss\">:head</span>, <span class=\"ss\">:attrs</span> <span class=\"nv\">nil</span>, <span class=\"ss\">:content</span> <span class=\"nv\">nil</span><span class=\"p\">}</span>\n   <span class=\"s\">\"\\n\"</span>\n   <span class=\"p\">{</span><span class=\"ss\">:tag</span> <span class=\"ss\">:body</span>, <span class=\"ss\">:attrs</span> <span class=\"nv\">nil</span>, <span class=\"ss\">:content</span> <span class=\"nv\">nil</span><span class=\"p\">})})</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The options you can pass mirror those of <a href=\"http://htmlcleaner.sourceforge.net/parameters.php\">HtmlCleaner</a>. Full docs available in <a href=\"https://github.com/shriphani/enlive-helper\">this github repo</a>.</p>\n\n<p>Also, the code is something I threw together from my research so it is released under <a href=\"http://matt.might.net/articles/crapl/CRAPL-LICENSE.txt\">Matt Might&rsquo;s CRAPL license</a>.</p>") #f (u . "\n<p>In manipulating HTML documents for features, I find myself needing to use some operations all the time - removing script tags, comments and the like. This feature-set is available in HtmlCleaner and I thus merged the two libraries to produce <code>enlive-helper</code>.</p>\n\n<p>Now you can do:</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"nf\">html-resource-steroids</span> \n <span class=\"p\">(</span><span class=\"nf\">java.io.StringReader.</span> <span class=\"s\">\"&lt;html&gt;&lt;body&gt;&lt;a&gt;hi&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;\"</span><span class=\"p\">)</span> \n <span class=\"ss\">:prune-tags</span> <span class=\"s\">\"a\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And as a result the <code>a</code> tag is not picked up:</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">({</span><span class=\"ss\">:tag</span> <span class=\"ss\">:html</span>,\n  <span class=\"ss\">:attrs</span> <span class=\"nv\">nil</span>,\n  <span class=\"ss\">:content</span>\n  <span class=\"p\">(</span><span class=\"s\">\"\\n\"</span>\n   <span class=\"p\">{</span><span class=\"ss\">:tag</span> <span class=\"ss\">:head</span>, <span class=\"ss\">:attrs</span> <span class=\"nv\">nil</span>, <span class=\"ss\">:content</span> <span class=\"nv\">nil</span><span class=\"p\">}</span>\n   <span class=\"s\">\"\\n\"</span>\n   <span class=\"p\">{</span><span class=\"ss\">:tag</span> <span class=\"ss\">:body</span>, <span class=\"ss\">:attrs</span> <span class=\"nv\">nil</span>, <span class=\"ss\">:content</span> <span class=\"nv\">nil</span><span class=\"p\">})})</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The options you can pass mirror those of <a href=\"http://htmlcleaner.sourceforge.net/parameters.php\">HtmlCleaner</a>. Full docs available in <a href=\"https://github.com/shriphani/enlive-helper\">this github repo</a>.</p>\n\n<p>Also, the code is something I threw together from my research so it is released under <a href=\"http://matt.might.net/articles/crapl/CRAPL-LICENSE.txt\">Matt Might&rsquo;s CRAPL license</a>.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-03-13-heritrix-tutorial.md" . unix) f post (u . "Modifying The Heritrix Web Crawler") (? . 5) 1394936389 (p+ #"/Users/shriphani/blog/2014/03/13/modifying-the-heritrix-web-crawler/index.html" . unix) "/2014/03/13/modifying-the-heritrix-web-crawler/" (u . "2014-03-13T01:59:07") (? . 26) (? . 27) (c (u . "java") c (u . "heritrix") c (u . "crawling") c (u . "web-crawling")) (u . "\n<p>This is a post I wrote to teach myself about Heritrix and modifying it. There are solid motivations for modifying web-crawlers (say we know how to beat a simple BFS for some specific website). In this post, I will modify a routine that is central to web-crawling - extracting URLs from a webpage.</p>") #t (u . "\n<p>This is a post I wrote to teach myself about Heritrix and modifying it. There are solid motivations for modifying web-crawlers (say we know how to beat a simple BFS for some specific website). In this post, I will modify a routine that is central to web-crawling - extracting URLs from a webpage.</p>\n<!-- more-->\n\n<p>First, I am going to put together a simple extractor in Heritrix. This extractor uses an XPath (I used a very trivial XPath for the sake of this example). I use the HtmlCleaner library for parsing the supplied HTML and then used the XPath classes that ship with java (I have personally found that most Html parsing libraries bundle partial XPath implementations and I typically use more complex queries for my research so I prefer dealing with the <code>org.w3c.xml.dom</code> documents.</p>\n\n<p>This is what the extractor class looks like. It is super simple:</p>\n\n<script src=\"https://gist.github.com/shriphani/9574641.js\"></script>\n\n<p>Now, to see it in action, you need to create a Heritrix job and specify that this is the extractor you want to use. I have a test job that crawls my blog. A heritrix job contains a configuration file where you can specify the extractors and some other details (seed links and all that). In this file, I specified the extractor class like so:</p>\n\n<pre><code>&lt;bean id=\"extractorHtml\" class=\"org.archive.modules.extractor.XPathExtractor\"&gt;</code></pre>\n\n<p>(incidentally the entire file looks like <a href=\"https://gist.github.com/shriphani/9574658\">this</a>).</p>\n\n<p>I was subsequently able to process a webpage and all that without too much fuss. In the near future, I plan to describe some of the more interesting stuff I&rsquo;ve been able to do with heritrix.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-05-21-visualizing-the-most-powerful-brands-by-industry.md" . unix) f post (u . "Visualizing the most powerful brands by industry") (? . 0) 1400676823 (p+ #"/Users/shriphani/blog/2014/05/21/visualizing-the-most-powerful-brands-by-industry/index.html" . unix) "/2014/05/21/visualizing-the-most-powerful-brands-by-industry/" (u . "2014-05-21T07:56:47") (? . 25) (? . 3) (c (u . "d3") c (u . "visualizations") c (u . "visualization") c (u . "forbes") c (u . "brand") c (u . "powerful")) (u . "\n<p>Hover on the arcs for details.</p>\n\n<p>Data from <a href=\"http://www.forbes.com/powerful-brands/list/\">Forbes</a>, plotted using d3.js</p>\n\n<iframe frameborder=\"0\" height=\"700\" width=\"900\" scrolling=\"no\" src=\"http://shriphani.com/visualizations/forbes_brand_awareness/\"></iframe>") #f (u . "\n<p>Hover on the arcs for details.</p>\n\n<p>Data from <a href=\"http://www.forbes.com/powerful-brands/list/\">Forbes</a>, plotted using d3.js</p>\n\n<iframe frameborder=\"0\" height=\"700\" width=\"900\" scrolling=\"no\" src=\"http://shriphani.com/visualizations/forbes_brand_awareness/\"></iframe>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-10-13-using-macros-to-implement-a-protocol.md" . unix) f post (u . "Zephyros Racket API") (? . 28) 1381792738 (p+ #"/Users/shriphani/blog/2013/10/13/zephyros-racket-api/index.html" . unix) "/2013/10/13/zephyros-racket-api/" (u . "2013-10-13T17:27:00") (? . 36) (? . 29) (c (u . "racket") c (u . "macros") c (u . "\"window managers\"") c (u . "zephyros")) (u . "\n<p>In the recent past, I wanted to control the OS X window manager from racket like I could on Linux using the X11 library. I found a very sweet Github project called <a href=\"https://github.com/sdegutis/zephyros/\">zephyros</a> that implemented a large number of vital routines (vital for managing windows anyway) and provided a simple protocol using json. Since it would be convenient to have a racket module, I wrote a wrapper around it.</p>") #t (u . "\n<p>In the recent past, I wanted to control the OS X window manager from racket like I could on Linux using the X11 library. I found a very sweet Github project called <a href=\"https://github.com/sdegutis/zephyros/\">zephyros</a> that implemented a large number of vital routines (vital for managing windows anyway) and provided a simple protocol using json. Since it would be convenient to have a racket module, I wrote a wrapper around it.</p>\n<!-- more-->\n\n<p>The zephyros protocol has the following format:</p>\n\n<pre>\nroutine_name receiver args*</pre>\n\n<p>A <code>routine_name</code> is something like <code>&ldquo;move_window&rdquo;</code>. A <code>receiver</code> is an object identifier that we are trying to instruct (so if we want to move window 1 to location <code>(x, y)</code>, the API call looks like <code>(move-window 1 &rsquo;(x y))</code>). The receiver is typically <code>null</code> for routines that cause no state change.</p>\n\n<p>So, our racket API calls look like:</p>\n\n<pre>\n(routine-name receiver args*)</pre>\n\n<p>The zephyros API is asynchronous but I prefer having nothing to do with this callback business so routines that return a response are exposed as functions that return values.</p>\n\n<p>There is a general pattern to the routines defined: send a message with the right arguments, poll for a response if there is any and return the response (or perform the right state changes). So, we have this macro that takes a protocol string and a list of symbols corresponding to the args and then defines a function.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a> </span><span class=\"p\">(</span><span class=\"nf\">protocol-&gt;response-function</span> <span class=\"nv\"><a href=\"http://docs.racket-lang.org/raco/decompile.html#(def._((lib._compiler/zo-structs..rkt)._stx))\" style=\"color: inherit\">stx</a></span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._with-syntax))\" style=\"color: inherit\">with-syntax</a> </span><span class=\"p\">([</span><span class=\"nf\">fn-name</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._datum-~3esyntax))\" style=\"color: inherit\">datum-&gt;syntax</a></span>\n                             <span class=\"nv\"><a href=\"http://docs.racket-lang.org/raco/decompile.html#(def._((lib._compiler/zo-structs..rkt)._stx))\" style=\"color: inherit\">stx</a></span>\n                             <span class=\"p\">(</span><span class=\"nf\">get-fn-name</span>\n                              <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cadr))\" style=\"color: inherit\">cadr</a></span>\n                               <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-~3edatum))\" style=\"color: inherit\">syntax-&gt;datum</a></span> <span class=\"nv\"><a href=\"http://docs.racket-lang.org/raco/decompile.html#(def._((lib._compiler/zo-structs..rkt)._stx))\" style=\"color: inherit\">stx</a></span><span class=\"p\">))))])</span>\n   <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._syntax-case))\" style=\"color: inherit\">syntax-case</a> </span><span class=\"nv\"><a href=\"http://docs.racket-lang.org/raco/decompile.html#(def._((lib._compiler/zo-structs..rkt)._stx))\" style=\"color: inherit\">stx</a></span> <span class=\"p\">()</span>\n     <span class=\"c1\">;; no args <a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a> no receiver routines</span>\n     <span class=\"p\">[(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span> <span class=\"nv\">str</span><span class=\"p\">)</span>     \n      <span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\">fn-name</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"nf\">send-message</span> <span class=\"nv\">str</span><span class=\"p\">))]</span>\n\n     <span class=\"c1\">;; no receiver but routine has args</span>\n     <span class=\"p\">[(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span> <span class=\"nv\">str</span> <span class=\"p\">(</span><span class=\"nf\">args</span> <span class=\"o\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n      <span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\">fn-name</span> <span class=\"nv\">args</span> <span class=\"o\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"nf\">send-message</span> <span class=\"nv\">str</span> <span class=\"ss\">'null</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a> </span><span class=\"nv\">args</span> <span class=\"o\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)))]</span>\n\n     <span class=\"c1\">;; receiver <a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a> args exist</span>\n     <span class=\"p\">[(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span> <span class=\"nv\">str</span> <span class=\"nv\">receiver</span> <span class=\"p\">(</span><span class=\"nf\">args</span> <span class=\"o\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n      <span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"p\">(</span><span class=\"nf\">fn-name</span> <span class=\"nv\">receiver</span> <span class=\"nv\">args</span> <span class=\"o\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"nf\">send-message</span> <span class=\"nv\">str</span> <span class=\"nv\">receiver</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a> </span><span class=\"nv\">args</span> <span class=\"o\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)))])))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And then one can do this:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"nf\">protocol-&gt;response-function</span> <span class=\"s\">\"clipboard_contents\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And this exports a function <code>clipboard-contents</code> that can be invoked like so <code>(clipboard-contents)</code>.</p>\n\n<p>Using macros that look a lot like this I was able to define routines that perform an action, return values, poll for events and build a clean API that exports zephyros functionality. You can see the final codebase <a href=\"https://github.com/shriphani/zephyros/blob/master/libs/zephyros.rkt\">here</a>.</p>\n\n<p>The full API is documented <a href=\"https://github.com/shriphani/zephyros/blob/master/Docs/Racket.md\">here</a>.</p>\n\n<p>Now, it is straightforward to use racket to implement custom window managers for OS X.</p>\n\n<p>Say we want to take the first two windows and then use them to cover 50% of the screen each (while ignoring the rest of the windows), the script looks like so:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"kn\">#lang <a href=\"http://docs.racket-lang.org/scribble/scribble_manual_code.html#(form._((lib._scribble/manual..rkt)._racket))\" style=\"color: inherit\">racket</a></span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a> </span><span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span> <span class=\"s\">\"/Applications/Zephyros.app/Contents/Resources/libs/zephyros.rkt\"</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"nv\">windows</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._take))\" style=\"color: inherit\">take</a></span> <span class=\"p\">(</span><span class=\"nf\">visible-windows</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"nv\">screen-dimensions</span> <span class=\"p\">(</span><span class=\"nf\">frame-without-dock-or-menu</span> <span class=\"p\">(</span><span class=\"nf\">main-screen</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"nv\">screen-width</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></span> <span class=\"nv\">screen-dimensions</span> <span class=\"ss\">'w</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a> </span><span class=\"nv\">screen-height</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></span> <span class=\"nv\">screen-dimensions</span> <span class=\"ss\">'h</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">set-frame</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._first))\" style=\"color: inherit\">first</a></span> <span class=\"nv\">windows</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._make-hash))\" style=\"color: inherit\">make-hash</a></span>\n                            <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span>\n                             <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a> </span><span class=\"ss\">'x</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                             <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a> </span><span class=\"ss\">'y</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                             <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a> </span><span class=\"ss\">'h</span> <span class=\"nv\">screen-height</span><span class=\"p\">)</span>\n                             <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a> </span><span class=\"ss\">'w</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._inexact-~3eexact))\" style=\"color: inherit\">inexact-&gt;exact</a> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a> </span><span class=\"nv\">screen-width</span> <span class=\"mi\">2</span><span class=\"p\">))))))</span>\n<span class=\"p\">(</span><span class=\"nf\">focus-window</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._first))\" style=\"color: inherit\">first</a></span> <span class=\"nv\">windows</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">set-frame</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._second))\" style=\"color: inherit\">second</a></span> <span class=\"nv\">windows</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._make-hash))\" style=\"color: inherit\">make-hash</a></span>\n                             <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span>\n                              <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a> </span><span class=\"ss\">'x</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._inexact-~3eexact))\" style=\"color: inherit\">inexact-&gt;exact</a> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a> </span><span class=\"nv\">screen-width</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n                              <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a> </span><span class=\"ss\">'y</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                              <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a> </span><span class=\"ss\">'h</span> <span class=\"nv\">screen-height</span><span class=\"p\">)</span>\n                              <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a> </span><span class=\"ss\">'w</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._inexact-~3eexact))\" style=\"color: inherit\">inexact-&gt;exact</a> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a> </span><span class=\"nv\">screen-width</span> <span class=\"mi\">2</span><span class=\"p\">))))))</span>\n<span class=\"p\">(</span><span class=\"nf\">focus-window</span> <span class=\"p\">(</span><span class=\"nf\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._second))\" style=\"color: inherit\">second</a></span> <span class=\"nv\">windows</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And this is what happens when we run it (sorry about the 480px video):\n <br /></p>\n\n<iframe width=\"420\" height=\"315\" src=\"//www.youtube.com/embed/6kMmS5I7ISU\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-02-14-clojure-scraping-overview.md" . unix) f post (u . "clojure scraping overview") (? . 4) 1392359234 (p+ #"/Users/shriphani/blog/2014/02/14/clojure-scraping-overview/index.html" . unix) "/2014/02/14/clojure-scraping-overview/" (u . "2014-02-14T01:16:35") (? . 12) (? . 26) (c (u . "clojure") c (u . "scraping") c (u . "clj-xpath") c (u . "enlive")) (u . "\n<p>Earlier this week I gave a talk on scraping with clojure - primarily using <code>clj-xpath</code> and <code>enlive</code> at the Pittsburgh clojure meetup group. Slides and code are linked to below.</p>\n\n<script async=\"async\" class=\"speakerdeck-embed\" data-id=\"f0b571b0759a0131f0bd026a5a2b7ed1\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n<p>Code: <a href=\"https://github.com/shriphani/clojure_scraping_overview\">https://github.com/shriphani/clojure_scraping_overview</a></p>") #f (u . "\n<p>Earlier this week I gave a talk on scraping with clojure - primarily using <code>clj-xpath</code> and <code>enlive</code> at the Pittsburgh clojure meetup group. Slides and code are linked to below.</p>\n\n<script async=\"async\" class=\"speakerdeck-embed\" data-id=\"f0b571b0759a0131f0bd026a5a2b7ed1\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n<p>Code: <a href=\"https://github.com/shriphani/clojure_scraping_overview\">https://github.com/shriphani/clojure_scraping_overview</a></p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-07-21-pittsburgh-vintage-grand-prix-italian-cars.md" . unix) f post (u . "Pittsburgh Vintage Grand Prix - Italian Cars") (? . 30) 1379088315 (p+ #"/Users/shriphani/blog/2013/07/21/pittsburgh-vintage-grand-prix-italian-cars/index.html" . unix) "/2013/07/21/pittsburgh-vintage-grand-prix-italian-cars/" (u . "2013-07-21T20:26:32") (? . 31) (? . 32) (c (u . "ferrari") c (u . "lamborghini") c (u . "pininfarina") c (u . "pics") c (u . "photos")) (u . "\n<p>In the Pittsburgh Vintage Grand Prix [<a name=\"pvgp-back\" href=\"#pvgp\">1</a>], Ferrari had a large exhibit in celebration of their 50th year in America and a few Lamborghinis, Alfas and Maseratis showed up. Since I am not likely to ever own a Ferrari, I behaved like a tourist and took a few pictures. Some of these vehicles were incredibly well maintained. You can see the entire album by following the link below</p>\n\n<p><a href=\"https://www.dropbox.com/sc/i2pequ3scy9jgr9/ZDPVN_TRSE\"><img src=\"http://www.shriphani.com/pics/PVGP_Cover.jpeg\" /></a></p>\n\n<p>[<a name=\"pvgp\">1</a>] <a href=\"www.pvgp.org/\u200E\">The Pittsburgh Vintage Grand Prix</a> <a href=\"#pvgp-back\" style=\"font-size:75%;\">go back</a></p>") #f (u . "\n<p>In the Pittsburgh Vintage Grand Prix [<a name=\"pvgp-back\" href=\"#pvgp\">1</a>], Ferrari had a large exhibit in celebration of their 50th year in America and a few Lamborghinis, Alfas and Maseratis showed up. Since I am not likely to ever own a Ferrari, I behaved like a tourist and took a few pictures. Some of these vehicles were incredibly well maintained. You can see the entire album by following the link below</p>\n\n<p><a href=\"https://www.dropbox.com/sc/i2pequ3scy9jgr9/ZDPVN_TRSE\"><img src=\"http://www.shriphani.com/pics/PVGP_Cover.jpeg\" /></a></p>\n\n<p>[<a name=\"pvgp\">1</a>] <a href=\"www.pvgp.org/\u200E\">The Pittsburgh Vintage Grand Prix</a> <a href=\"#pvgp-back\" style=\"font-size:75%;\">go back</a></p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-07-21-accessing-your-kindle-highlights.md" . unix) f post (u . "Accessing Your Kindle Highlights") (? . 31) 1379088315 (p+ #"/Users/shriphani/blog/2013/07/21/accessing-your-kindle-highlights/index.html" . unix) "/2013/07/21/accessing-your-kindle-highlights/" (u . "2013-07-21T04:34:14") (? . 10) (? . 30) (c (u . "racket") c (u . "functional-programming") c (u . "kindle") c (u . "kindle-api") c (u . "kindle highlights") c (u . "clojure")) (u . "\n<p>In 2010, I purchased my first Kindle and since then apart from GEB [<a href=\"#GEB\" name=\"GEB-Back\">1</a>], I haven&rsquo;t bothered with physical copies. The Kindle store satisfies most of my needs (I find situations where the paperback costs less than the digital copy and refuse to buy the book on principle).</p>\n\n<p>The books can be read on any platform (OS X, iOS for iPad and iPhone in my case and I do remember a rather unpleasant Kindle app on WP7)</p>\n\n<p>One of the benefits of a digital book is that it should be straightforward for me to collect a list of highlights I&rsquo;ve made about the book. Amazon (in their infinite wisdom) have not provided an API in the 3 or so years I&rsquo;ve used the Kindle ecosystem and manually transcribing the quotes is not something I am interested in doing. Scraping remains the only alternative. I decided to use clojure for this task.</p>") #t (u . "\n<p>In 2010, I purchased my first Kindle and since then apart from GEB [<a href=\"#GEB\" name=\"GEB-Back\">1</a>], I haven&rsquo;t bothered with physical copies. The Kindle store satisfies most of my needs (I find situations where the paperback costs less than the digital copy and refuse to buy the book on principle).</p>\n\n<p>The books can be read on any platform (OS X, iOS for iPad and iPhone in my case and I do remember a rather unpleasant Kindle app on WP7)</p>\n\n<p>One of the benefits of a digital book is that it should be straightforward for me to collect a list of highlights I&rsquo;ve made about the book. Amazon (in their infinite wisdom) have not provided an API in the 3 or so years I&rsquo;ve used the Kindle ecosystem and manually transcribing the quotes is not something I am interested in doing. Scraping remains the only alternative. I decided to use clojure for this task.</p>\n<!-- more-->\n\n<p>For ClueWeb, I discarded the use of Selenium since running a browser impedes the crawler. Selenium is a good fit for this problem which can be summarized as:</p>\n\n<pre>\n(logging into kindle.amazon.com -&gt; downloading a list o of book-specific-s-expressions -&gt; download highlights for desired book/author)</pre>\n\n<p>The following routines accomplish that. I dump both to file since my list of books read does not grow by the second so it is feasible to work with a stale file.</p>\n\n<script src=\"http://gist-it.appspot.com/github/shriphani/clojure-kindle-highlights/blob/master/src/kindle_highlights/core.clj\"></script>\n\n<p>The resulting <code>s-expressions</code> look like this:</p>\n\n<p>Book-Details:</p>\n\n<script src=\"https://gist.github.com/shriphani/6049714.js\"></script>\n\n<p>And the highlights:</p>\n\n<script src=\"https://gist.github.com/shriphani/6049717.js\"></script>\n\n<p>Both there are (slightly-curated) <code>s-expressions</code> from my reading lists and Kurt Vonnegut books respectively. You can work on curating the resulting <code>s-expressions</code> using your own techniques.</p>\n\n<p>I have a command line wrapper around it. Details on the github repo wiki [<a href=\"#Github\" name=\"Github-back\">2</a>]. What would be more interesting is to make the filter a routine a bit better than a linear scan + regular expression match.</p>\n\n<p>[<a name=\"GEB\">1</a>] <a href=\"http://www.amazon.com/gp/product/0465026567/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0465026567&amp;linkCode=as2&amp;tag=shriswebl-20\">Gödel, Escher, Bach: An Eternal Golden Braid</a><img src=\"http://ir-na.amazon-adsystem.com/e/ir?t=shriswebl-20&amp;l=as2&amp;o=1&amp;a=0465026567\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> <a href=\"#GEB-Back\" style=\"font-size:75%;\">go-back</a></p>\n\n<p>[<a name=\"Github\">2</a>] <a href=\"https://github.com/shriphani/clojure-kindle-highlights/\">https://github.com/shriphani/clojure-kindle-highlights/</a> <a href=\"#Github-back\" style=\"font-size:75%;\">go-back</a></p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-08-18-on-carrots-sticks-and-the-internet.md" . unix) f post (u . "On Carrots, Sticks and the Internet") (? . 33) 1410378193 (p+ #"/Users/shriphani/blog/2014/08/18/on-carrots-sticks-and-the-internet/index.html" . unix) "/2014/08/18/on-carrots-sticks-and-the-internet/" (u . "2014-08-18T01:57:02") (? . 34) (? . 35) (c (u . "google") c (u . "schema.org") c (u . "semantic-web") c (u . "search") c (u . "information-extraction")) (u . "\n<p>A few months, ago I had the opportunity to attend a talk by R. Guha - creator of RSS and RDF, founder of Epinions <a href=\"http://www.guha.com/cv.html\">etc. etc.</a>.</p>\n\n<p>This particular talk by Guha was on <a href=\"http://schema.org/\">schema.org</a> - markup you can use to specify to crawlers the type of content being presented (i.e. a schema like reviews, product descriptions and so on).</p>\n\n<p>Two obvious questions emerged during the talk at this point - (i) how did this particular markup become popular (schema.org is employed by something like a few million sites and has resulted in a billion or so entities), (ii) how do you make something like this go viral at all - is popularity up to chance, i.e. do you just leave it out there and hope it gets adopted?</p>\n\n<p>Guha mentioned that in exchange for adoption, Google offered a richer search results interface. i.e. you could make your search results look nicer like so:</p>\n\n<p><img src=\"/img/gits_imdb_result.png\" alt=\"IMDB search result\" /></p>\n\n<p>This would translate to more clicks and a better user experience for your own site right from the google results page. In addition to this, Schema.org was adopted by Google, Bing and a couple other search engines which in total accounted for 90% of the search-engine market share.</p>\n\n<p>Today schema.org apparently permeates several of Google&rsquo;s products (according to Guha).</p>") #f (u . "\n<p>A few months, ago I had the opportunity to attend a talk by R. Guha - creator of RSS and RDF, founder of Epinions <a href=\"http://www.guha.com/cv.html\">etc. etc.</a>.</p>\n\n<p>This particular talk by Guha was on <a href=\"http://schema.org/\">schema.org</a> - markup you can use to specify to crawlers the type of content being presented (i.e. a schema like reviews, product descriptions and so on).</p>\n\n<p>Two obvious questions emerged during the talk at this point - (i) how did this particular markup become popular (schema.org is employed by something like a few million sites and has resulted in a billion or so entities), (ii) how do you make something like this go viral at all - is popularity up to chance, i.e. do you just leave it out there and hope it gets adopted?</p>\n\n<p>Guha mentioned that in exchange for adoption, Google offered a richer search results interface. i.e. you could make your search results look nicer like so:</p>\n\n<p><img src=\"/img/gits_imdb_result.png\" alt=\"IMDB search result\" /></p>\n\n<p>This would translate to more clicks and a better user experience for your own site right from the google results page. In addition to this, Schema.org was adopted by Google, Bing and a couple other search engines which in total accounted for 90% of the search-engine market share.</p>\n\n<p>Today schema.org apparently permeates several of Google&rsquo;s products (according to Guha).</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-08-27-racket-whistlepig-bindings.md" . unix) f post (u . "Racket Whistlepig Bindings") (? . 36) 1379088315 (p+ #"/Users/shriphani/blog/2013/08/27/racket-whistlepig-bindings/index.html" . unix) "/2013/08/27/racket-whistlepig-bindings/" (u . "2013-08-27T01:12:00") (? . 37) (? . 28) (c (u . "racket") c (u . "ffi") c (u . "racket-ffi") c (u . "search") c (u . "real-time") c (u . "retrieval")) (u . "\n<p>Whistlepig is a lightweight real-time search engine written in ANSI C. (<a href=\"http://masanjin.net/whistlepig/\">description</a> and <a href=\"https://github.com/wmorgan/whistlepig\">source</a>) I heard about it when Don Metzler plugged it in an answer he wrote on quora. In this post, with very little code, I was able to build an index, query it and write a servlet that talks to the index using the FFI.</p>") #t (u . "\n<p>Whistlepig is a lightweight real-time search engine written in ANSI C. (<a href=\"http://masanjin.net/whistlepig/\">description</a> and <a href=\"https://github.com/wmorgan/whistlepig\">source</a>) I heard about it when Don Metzler plugged it in an answer he wrote on quora. In this post, with very little code, I was able to build an index, query it and write a servlet that talks to the index using the FFI.</p>\n<!-- more-->\n\n<p>Whistlepig is implemented in less than 3000 lines of ANSI C. It comes with a very decent query language and returns documents (that match a query) sorted by their time-of-insertion (into the index).</p>\n\n<p>For using the FFI, we need a shared library. I had to modify the Makefile slightly to make it compile on OS X (you can download this from my fork <a href=\"https://github.com/shriphani/whistlepig/tree/osx_compile\">here</a>). I was able to build it on Linux with ease though. You can build the <code>.so</code> (<code>.dylib</code>) file using the following command:</p>\n\n<script src=\"https://gist.github.com/shriphani/6355004.js\"></script>\n\n<p>On OS X, you will need to replace the <code>.so</code> with <code>.dylib</code>.</p>\n\n<p>In order for the generated <code>libwhistlepig.so</code> file to be picked up the Racket FFI, you will need to add the directory where it resides to the environment variable <code>LD_LIBRARY_PATH</code>.</p>\n\n<p>Next, we need to use the FFI and write racket functions that call the corresponding Whistlepig routines. This file is sufficient to wrap around all this routines we will need to use.</p>\n\n<script src=\"https://gist.github.com/shriphani/6350939.js\"></script>\n\n<p>Let us now test our implementation. Whistlepig itself ships with two programs: <code>add</code> and <code>query</code>. <code>add</code> adds a bunch of files specified on the command line to a new index. We can replicate the functionality in <code>add.rkt</code>:</p>\n\n<script src=\"https://gist.github.com/shriphani/6350956.js\"></script>\n\n<p><code>interactive.rkt</code> takes and index location and interactively runs queries against it and returns doc-ids. This is <code>interactive.rkt</code>.</p>\n\n<script src=\"https://gist.github.com/shriphani/6350962.js\"></script>\n\n<p>Now, the next step is obviously very straightforward. I wanted a quick way to get set up and running. We don&rsquo;t have things like stored-fields in Lucene so, we need an external map to doc-ids. I am using a file that contains a list of <code>s-expressions</code> that look like this:</p>\n\n<p><code>(doc-id doc-path doc-title doc-link)</code></p>\n\n<p>On my laptop (not accessible from the public web), the file looks like:</p>\n\n<script src=\"https://gist.github.com/shriphani/6358032.js\"></script>\n\n<p>So, our search engine will start, load the documents and add them to the index in the order specified.</p>\n\n<p>When a query comes along, we get the doc-ids from the engine and line them up with the document title (and thus we get the doc-link that can be rendered).</p>\n\n<p>We accept queries using a URL of the form <code>http://domain/search?q=query</code>. This tiny servlet accomplishes that:</p>\n\n<script src=\"https://gist.github.com/shriphani/6358046.js\"></script>\n\n<p>You can try it out here : <a href=\"http://blog.shriphani.com/search?q=hello\">http://blog.shriphani.com/search?q=hello</a>. It is very clunky and only indexes my blog&rsquo;s post pages. . It won&rsquo;t generate snippets (the postings list doesn&rsquo;t store token positions).</p>\n\n<p>To make this really work, I will need to integrate it with Frog and flesh the UI out. This was something I threw together quickly so I could build on it later. It ended up being a good excuse to continue using the FFI. The whistlepig bindings are quite sparse too and can use some work.</p>\n\n<p>The full code is available in <a href=\"https://github.com/shriphani/racket-whistlepig\">this Github repository</a>.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-11-22-obituary.md" . unix) f post (u . "Obituary") (? . 13) 1385143976 (p+ #"/Users/shriphani/blog/2013/11/22/obituary/index.html" . unix) "/2013/11/22/obituary/" (u . "2013-11-22T12:41:30") (? . 29) (? . 21) (c (u . "obituary")) (u . "\n<p>Earlier this month, my paternal grandfather passed away. I didn&rsquo;t speak to him before his death since I expected him to recover from his current bout of ill-health and I have since carried some guilt thanks to this.</p>\n\n<p>I think this excerpt from a Pink Floyd song best summarizes his life:</p>\n\n<blockquote>\n <p>Run, run rabbit run\n  <br /> Dig that hole, forget the sun\n  <br /> And when at last the work is done\n  <br /> Don&rsquo;t sit down, it&rsquo;s time to dig another one\n  <br /></p></blockquote>\n\n<p style=\"text-align: right;\">-- [Breathe, Pink Floyd](http://rock.rapgenius.com/Pink-floyd-breathe-lyrics)</p>\n\n<p>RIP.</p>") #f (u . "\n<p>Earlier this month, my paternal grandfather passed away. I didn&rsquo;t speak to him before his death since I expected him to recover from his current bout of ill-health and I have since carried some guilt thanks to this.</p>\n\n<p>I think this excerpt from a Pink Floyd song best summarizes his life:</p>\n\n<blockquote>\n <p>Run, run rabbit run\n  <br /> Dig that hole, forget the sun\n  <br /> And when at last the work is done\n  <br /> Don&rsquo;t sit down, it&rsquo;s time to dig another one\n  <br /></p></blockquote>\n\n<p style=\"text-align: right;\">-- [Breathe, Pink Floyd](http://rock.rapgenius.com/Pink-floyd-breathe-lyrics)</p>\n\n<p>RIP.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-07-21-record-extraction-and-timestamps.md" . unix) f post (u . "Record Extraction and Timestamps") (? . 22) 1405994912 (p+ #"/Users/shriphani/blog/2014/07/21/record-extraction-and-timestamps/index.html" . unix) "/2014/07/21/record-extraction-and-timestamps/" (u . "2014-07-21T11:27:30") (? . 16) (? . 34) (c (u . "clojure") c (u . "subotai") c (u . "records") c (u . "timestamps") c (u . "dates") c (u . "natural-language") c (u . "big-data") c (u . "data")) (u . "\n<p>Of late, some of my research has involved extracting records from web-pages that contain a lot of user-generated data.</p>") #t (u . "\n<p>Of late, some of my research has involved extracting records from web-pages that contain a lot of user-generated data.</p>\n<!-- more-->")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-04-05-clojure-java-string-trim.md" . unix) f post (u . "Clojure/Java String trim") (? . 19) 1396728928 (p+ #"/Users/shriphani/blog/2014/04/05/clojure-java-string-trim/index.html" . unix) "/2014/04/05/clojure-java-string-trim/" (u . "2014-04-05T16:07:52") (? . 27) (? . 18) (c (u . "clojure") c (u . "java") c (u . "quirks") c (u . "guava")) (u . "\n<p>Java&rsquo;s string <code>trim</code> routine tests for whitespace using <code>Character.isWhitespace</code> and so does Clojure&rsquo;s <code>clojure.string/trim</code>.</p>\n\n<p>While processing a dataset off the web containing unicode space characters, the trim routine failed to do anything useful. Luckily, <a href=\"http://stackoverflow.com/questions/1437933/how-to-properly-trim-whitespaces-from-a-string-in-java\">a StackOverflow thread</a> suggested using a routine from <a href=\"https://code.google.com/p/guava-libraries/\">Google&rsquo;s guava library</a>. So in Clojure, you can do this:</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"nf\">.trimFrom</span> <span class=\"nv\">CharMatcher/WHITESPACE</span> <span class=\"nv\">%</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>and this will do the job.</p>") #f (u . "\n<p>Java&rsquo;s string <code>trim</code> routine tests for whitespace using <code>Character.isWhitespace</code> and so does Clojure&rsquo;s <code>clojure.string/trim</code>.</p>\n\n<p>While processing a dataset off the web containing unicode space characters, the trim routine failed to do anything useful. Luckily, <a href=\"http://stackoverflow.com/questions/1437933/how-to-properly-trim-whitespaces-from-a-string-in-java\">a StackOverflow thread</a> suggested using a routine from <a href=\"https://code.google.com/p/guava-libraries/\">Google&rsquo;s guava library</a>. So in Clojure, you can do this:</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"nf\">.trimFrom</span> <span class=\"nv\">CharMatcher/WHITESPACE</span> <span class=\"nv\">%</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>and this will do the job.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-08-16-clueweb12-status-report.md" . unix) f post (u . "Clueweb12++ Status Report") (? . 37) 1379088315 (p+ #"/Users/shriphani/blog/2013/08/16/clueweb12-status-report/index.html" . unix) "/2013/08/16/clueweb12-status-report/" (u . "2013-08-16T14:47:51") (? . 32) (? . 36) (c (u . "research") c (u . "data processing") c (u . "crawl") c (u . "phd")) (u . "\n<p>I recently gave a talk at CMU on the state of the Clueweb12++ crawl. Here are the slides.</p>\n\n<script async=\"async\" class=\"speakerdeck-embed\" data-id=\"ec1069c0e8d10130d58342aa3a8e614d\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>") #f (u . "\n<p>I recently gave a talk at CMU on the state of the Clueweb12++ crawl. Here are the slides.</p>\n\n<script async=\"async\" class=\"speakerdeck-embed\" data-id=\"ec1069c0e8d10130d58342aa3a8e614d\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-08-21-faster-tree-edit-distance.md" . unix) f post (u . "Faster Tree Edit Distance") (? . 35) 1408684186 (p+ #"/Users/shriphani/blog/2014/08/21/faster-tree-edit-distance/index.html" . unix) "/2014/08/21/faster-tree-edit-distance/" (u . "2014-08-21T22:10:03") (? . 33) (? . 6) (c (u . "clojure") c (u . "data-mining") c (u . "html") c (u . "subotai") c (u . "trees") c (u . "tree-edit-distance") c (u . "dynamic-programming")) (u . "\n<p>Tree Edit Distance algorithms are typically used for comparing two trees and measuring how similar they are. This sort of thing allows you to detect plagarism in source code submissions or detect if we are looking at two web-pages which share the same underlying template. Subotai contains an implementation of the RTDM algorithm - which implements a variant of the vanilla edit-distance algorithm with a few restrictions. These restrictions are appropriate for the domain in question (HTML documents) and work fairly reasonably overall.</p>\n\n<p>In previous experiments, I found that representing the document using nested maps (which enlive produces) leads to a speedup compared to representing a document using the standard Java XML object.</p>\n\n<p>This post focuses on a simple transformation of the enlive tree to achieve a speedup in the implementation. The original motivation for this was to speed up an agglomerative clustering algorithm I was running on a large corpus.</p>") #t (u . "\n<p>Tree Edit Distance algorithms are typically used for comparing two trees and measuring how similar they are. This sort of thing allows you to detect plagarism in source code submissions or detect if we are looking at two web-pages which share the same underlying template. Subotai contains an implementation of the RTDM algorithm - which implements a variant of the vanilla edit-distance algorithm with a few restrictions. These restrictions are appropriate for the domain in question (HTML documents) and work fairly reasonably overall.</p>\n\n<p>In previous experiments, I found that representing the document using nested maps (which enlive produces) leads to a speedup compared to representing a document using the standard Java XML object.</p>\n\n<p>This post focuses on a simple transformation of the enlive tree to achieve a speedup in the implementation. The original motivation for this was to speed up an agglomerative clustering algorithm I was running on a large corpus.</p>\n<!-- more-->\n\n<p>The transformation itself is extremely simple, instead of the entire tree enlive generates, we just store enough info to run the DP algorithm.</p>\n\n<p>The following function does that:</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And now the algorithm proceeds quite quickly.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-12-13-probabilistic-counting.md" . unix) f post (u . "Probabilistic Counting") (? . 38) 1388097182 (p+ #"/Users/shriphani/blog/2013/12/13/probabilistic-counting/index.html" . unix) "/2013/12/13/probabilistic-counting/" (u . "2013-12-13T23:12:33") (? . 39) (? . 11) (c (u . "loglog") c (u . "flajolet") c (u . "probabilistic-counting") c (u . "clojure")) (u . "\n<p>I recently got my hands on the common-crawl URL dataset from <a href=\"https://archive.org/details/2013_common_crawl_index_urls\">here</a> and wanted to compute some stats like the number of unique domains contained in the corpus. This was the perfect opportunity to whip up a script that implemented Durande et. al&rsquo;s <a href=\"http://algo.inria.fr/flajolet/Publications/DuFl03.pdf\">log-log paper</a>.</p>") #t (u . "\n<p>I recently got my hands on the common-crawl URL dataset from <a href=\"https://archive.org/details/2013_common_crawl_index_urls\">here</a> and wanted to compute some stats like the number of unique domains contained in the corpus. This was the perfect opportunity to whip up a script that implemented Durande et. al&rsquo;s <a href=\"http://algo.inria.fr/flajolet/Publications/DuFl03.pdf\">log-log paper</a>.</p>\n<!-- more-->\n\n<p>The algorithm operates on a stream and produces an estimate for the cardinality of the input stream. Here&rsquo;s the algorithm itself:</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">probabilistic-counting.log-log</span>\n  <span class=\"s\">\"The LogLog algorithnm\"</span>\n  <span class=\"p\">(</span><span class=\"ss\">:use</span> <span class=\"p\">[</span><span class=\"nv\">incanter.core</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"ss\">:import</span> <span class=\"p\">[</span><span class=\"nv\">org.apache.mahout.math</span> <span class=\"nv\">MurmurHash</span><span class=\"p\">]</span>\n           <span class=\"p\">[</span><span class=\"nv\">org.apache.commons.lang3</span> <span class=\"nv\">SerializationUtils</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">rho</span>\n  <span class=\"s\">\"Number of leading zeros in the bit-representation</span>\n<span class=\"s\">   Args:</span>\n<span class=\"s\">    y : the number itself</span>\n<span class=\"s\">    size : optional : the number of bytes used to represent</span>\n<span class=\"s\">           the number. Default: 4 bytes/32 bits\"</span>\n  <span class=\"p\">([</span><span class=\"nv\">y</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">rho</span> <span class=\"nv\">y</span> <span class=\"mi\">32</span><span class=\"p\">))</span>\n  \n  <span class=\"p\">([</span><span class=\"nv\">y</span> <span class=\"nv\">size</span><span class=\"p\">]</span>\n     <span class=\"p\">(</span><span class=\"nf\">int</span>\n      <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"nv\">size</span>\n         <span class=\"p\">(</span><span class=\"nf\">Math/ceil</span>\n          <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nf\">Math/log</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">y</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n             <span class=\"p\">(</span><span class=\"nf\">Math/log</span> <span class=\"mi\">2</span><span class=\"p\">)))))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">alpha</span>\n  <span class=\"p\">[</span><span class=\"nv\">m</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">&lt; </span><span class=\"mi\">64</span> <span class=\"nv\">m</span><span class=\"p\">)</span>\n    <span class=\"mf\">0.79402</span>\n    <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nf\">Math/pow</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"p\">(</span><span class=\"nf\">gamma</span> <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"mi\">1</span> <span class=\"nv\">m</span><span class=\"p\">)))</span>\n                      <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nf\">Math/pow</span> <span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"mi\">1</span> <span class=\"nv\">m</span><span class=\"p\">)))</span>\n                         <span class=\"p\">(</span><span class=\"nf\">Math/log</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n                   <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"nv\">m</span><span class=\"p\">)))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">log-log</span>\n  <span class=\"p\">[</span><span class=\"nv\">xs</span> <span class=\"nv\">k</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">m</span>       <span class=\"p\">(</span><span class=\"nb\">int </span><span class=\"p\">(</span><span class=\"nf\">Math/pow</span> <span class=\"mi\">2</span> <span class=\"nv\">k</span><span class=\"p\">))</span>\n        <span class=\"nv\">buckets</span> <span class=\"p\">(</span><span class=\"nb\">make-array </span><span class=\"nv\">Integer/TYPE</span> <span class=\"nv\">m</span><span class=\"p\">)]</span>\n\n    <span class=\"p\">(</span><span class=\"nf\">do</span>\n      <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nb\">aset </span><span class=\"nv\">buckets</span> <span class=\"nv\">%</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"nv\">m</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"nv\">xs</span><span class=\"p\">]</span>\n        <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">h</span>   <span class=\"p\">(</span><span class=\"nb\">int </span><span class=\"p\">(</span><span class=\"nf\">MurmurHash/hash</span> <span class=\"p\">(</span><span class=\"nf\">SerializationUtils/serialize</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"mi\">1991</span><span class=\"p\">))</span>\n              <span class=\"nv\">idx</span> <span class=\"p\">(</span><span class=\"nb\">bit-and </span><span class=\"nv\">h</span> <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"nv\">m</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n              <span class=\"nb\">val </span><span class=\"p\">(</span><span class=\"nf\">max</span>\n                   <span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">buckets</span> <span class=\"nv\">idx</span><span class=\"p\">)</span>\n                   <span class=\"p\">(</span><span class=\"nf\">rho</span> <span class=\"nv\">h</span><span class=\"p\">))]</span>\n          <span class=\"p\">(</span><span class=\"nb\">aset </span><span class=\"nv\">buckets</span> <span class=\"nv\">idx</span> <span class=\"nv\">val</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"p\">(</span><span class=\"nf\">Math/pow</span> <span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nb\">apply + </span><span class=\"nv\">buckets</span><span class=\"p\">)</span> <span class=\"nv\">m</span><span class=\"p\">))</span>\n         <span class=\"nv\">m</span>\n         <span class=\"p\">(</span><span class=\"nf\">alpha</span> <span class=\"nv\">m</span><span class=\"p\">)))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And here&rsquo;s a test (actual cardinality = 1,000,000):</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">demo-log-log</span> <span class=\"p\">[]</span>\n  <span class=\"p\">(</span><span class=\"nf\">log-log</span>\n   <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">mod</span> <span class=\"nv\">%</span> <span class=\"mi\">1000000</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">10000000</span><span class=\"p\">))</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>When run, we get:</p>\n\n<pre><code>user&gt; (demo-log-log)\n1023513.5806580923</code></pre>\n\n<p>which is an error of 2.3%.</p>\n\n<p>Now, let us deploy it on the URL dataset. There are 2,412,755,840 URLs in the format: <code>host_reversed/path/scheme</code>. The following piece of code constructs the host stream and estimates the cardinality.</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">probabilistic-counting.demo-urls</span>\n  <span class=\"s\">\"Estimate the number of unique domains in the Common crawl dataset\"</span>\n  <span class=\"p\">(</span><span class=\"ss\">:use</span> <span class=\"p\">[</span><span class=\"nv\">probabilistic-counting.log-log</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">urls-stream</span>\n  <span class=\"p\">[</span><span class=\"nv\">url-file</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">url-file</span>\n      <span class=\"nv\">clojure.java.io/reader</span>\n      <span class=\"nv\">line-seq</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">hosts-stream</span>\n  <span class=\"p\">[</span><span class=\"nv\">url-stream</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">map</span>\n   <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nb\">first </span><span class=\"p\">(</span><span class=\"nf\">clojure.string/split</span> <span class=\"nv\">%</span> <span class=\"o\">#</span><span class=\"s\">\"/\"</span><span class=\"p\">))</span>\n   <span class=\"nv\">url-stream</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">count-hosts</span>\n  <span class=\"p\">[</span><span class=\"nv\">a-hosts-stream</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">log-log</span> <span class=\"nv\">a-hosts-stream</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">-main</span>\n  <span class=\"p\">[</span><span class=\"o\">&amp;</span> <span class=\"nv\">args</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nb\">path </span>    <span class=\"p\">(</span><span class=\"nb\">first </span><span class=\"nv\">args</span><span class=\"p\">)</span>\n        <span class=\"nv\">num-urls</span> <span class=\"p\">(</span><span class=\"nb\">when </span><span class=\"p\">(</span><span class=\"nb\">second </span><span class=\"nv\">args</span><span class=\"p\">)</span>\n                   <span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">args</span> <span class=\"nb\">second </span><span class=\"nv\">Integer/parseInt</span><span class=\"p\">))]</span>\n    <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">num-urls</span>\n      <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nb\">path </span><span class=\"nv\">urls-stream</span> <span class=\"nv\">hosts-stream</span> <span class=\"p\">(</span><span class=\"nb\">take </span><span class=\"nv\">num-urls</span><span class=\"p\">)</span> <span class=\"nv\">count-hosts</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nb\">path </span><span class=\"nv\">urls-stream</span> <span class=\"nv\">hosts-stream</span> <span class=\"nv\">count-hosts</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>On a portion of the dataset, these are the results:</p>\n\n<p>Using standard unix tools (<code>uniq</code> works here without a sort because the dataset is already sorted by hostname):</p>\n\n<pre><code>➜  probabilistic_counting git:(master) ✗ cat ~/common_crawl_index_urls | head -n 50000 | cut -d \"/\" -f 1 | uniq | wc -l\n9205\n\n➜  probabilistic_counting git:(master) ✗ cat ~/common_crawl_index_urls | head -n 500000 | cut -d \"/\" -f 1 | uniq | wc -l\n22164\n\n➜  probabilistic_counting git:(master) ✗ cat ~/common_crawl_index_urls | head -n 5000000 | cut -d \"/\" -f 1 | uniq | wc -l\n196318\n\n➜  probabilistic_counting git:(master) ✗ cat ~/common_crawl_index_urls | head -n 50000000 | cut -d \"/\" -f 1 | uniq | wc -l\n1525445</code></pre>\n\n<p>And log-log produces:</p>\n\n<pre><code>➜  probabilistic_counting git:(master) ✗ lein trampoline run ~/common_crawl_index_urls 50000\n9677.974613035705\n\n➜  probabilistic_counting git:(master) ✗ lein trampoline run ~/common_crawl_index_urls 500000\n22708.710878857888\n\n➜  probabilistic_counting git:(master) ✗ lein trampoline run ~/common_crawl_index_urls 5000000\n194919.74158794453\n\n➜  probabilistic_counting git:(master) ✗ lein trampoline run ~/common_crawl_index_urls 5000000\n1602155.9911824786</code></pre>\n\n<p>And the accuracy is really very good.</p>\n\n<p>This algorithm works since:</p>\n\n<ul>\n <li>$ \\rho(x) $ computes the position of the LSB in $ x $.</li>\n <li>The probability that $ \\rho(x) $ is $ k $ is $ \\frac{1}{2^k} $ (the  probability of obtaining a sequence of $ k &ndash; 1 $ zeroes and a one).</li>\n <li>Say, the real cardinality is $ n $. Thus, on $\\frac{n}{2^k}$ members of  this set, $ \\rho(x) $ will yield a value of $ k $.</li>\n <li>As a result, if you can drive $ 2^k $ as close to $ n $ as possible,  you have a good estimation of cardinality. This is achieved by  maximizing $ k $.</li>\n <li>And thus, $ \\arg\\max_{x \\in M} \\rho(x) $ is an estimator (albeit  biased) for $ \\log(n) $.</li></ul>\n\n<p>This is one of those extremely sweet papers where the idea (minus the details) fits on a business card and the resulting algorithm has immense practical value.</p>\n\n<p>The full source code is available in <a href=\"https://github.com/shriphani/probabilistic-counting\">this github repository</a>.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2014-05-07-the-medical-ir-paradox.md" . unix) f post (u . "Diagnosis by Google Doesn't Work") (? . 24) 1399831288 (p+ #"/Users/shriphani/blog/2014/05/07/diagnosis-by-google-doesn-t-work/index.html" . unix) "/2014/05/07/diagnosis-by-google-doesn-t-work/" (u . "2014-05-07T22:29:01") (? . 15) (? . 23) (c (u . "information-retrieval") c (u . "SIGIR") c (u . "healthcare") c (u . "symptoms")) (u . "\n<p>I have often Googled for symptoms, visited WebMD (and concluded that I have a deadly disease). At SIGIR 2013, Ryen White&rsquo;s paper, <a href=\"http://research.microsoft.com/en-us/um/people/ryenw/papers/WhiteSIGIR2013.pdf\">Beliefs and Biases in IR</a>, provided empirical evidence for the poor success-rate of diagnosis-by-google.</p>\n\n<p>The authors mined medical yes/no questions (For example: Can salmonella cause belly-ache), had physicians answer these questions, and then measured user bias post-search (i.e. the users after perusing the results answer their original questions with yes/no) (the paper contains a very detailed description of the experiments conducted).</p>\n\n<p>The accuracy of the final answer was the most interesting part of this paper - <strong>only about half of the questions were accurately answered. That is as good as flipping a (fair) coin for each question</strong>. The rest of the paper was a fairly interesting read (and it won the SIGIR 2013 best paper award).</p>") #f (u . "\n<p>I have often Googled for symptoms, visited WebMD (and concluded that I have a deadly disease). At SIGIR 2013, Ryen White&rsquo;s paper, <a href=\"http://research.microsoft.com/en-us/um/people/ryenw/papers/WhiteSIGIR2013.pdf\">Beliefs and Biases in IR</a>, provided empirical evidence for the poor success-rate of diagnosis-by-google.</p>\n\n<p>The authors mined medical yes/no questions (For example: Can salmonella cause belly-ache), had physicians answer these questions, and then measured user bias post-search (i.e. the users after perusing the results answer their original questions with yes/no) (the paper contains a very detailed description of the experiments conducted).</p>\n\n<p>The accuracy of the final answer was the most interesting part of this paper - <strong>only about half of the questions were accurately answered. That is as good as flipping a (fair) coin for each question</strong>. The rest of the paper was a fairly interesting read (and it won the SIGIR 2013 best paper award).</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-12-09-tree-edit-distance-enlive-version.md" . unix) f post (u . "Tree Edit Distance Enlive Version") (? . 39) 1386649939 (p+ #"/Users/shriphani/blog/2013/12/09/tree-edit-distance-enlive-version/index.html" . unix) "/2013/12/09/tree-edit-distance-enlive-version/" (u . "2013-12-09T03:52:34") (? . 40) (? . 38) (c (u . "tree-edit-distance") c (u . "research") c (u . "enlive")) (u . "\n<p>In my last post, I presented a code-dump that computed a restricted version of the tree edit distance algorithm. I was able to achieve a decent speed-up using enlive. Here&rsquo;s a code-dump:</p>") #t (u . "\n<p>In my last post, I presented a code-dump that computed a restricted version of the tree edit distance algorithm. I was able to achieve a decent speed-up using enlive. Here&rsquo;s a code-dump:</p>\n<!-- more-->\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">tree-edit-distance.enlive-core</span>\n  <span class=\"s\">\"A version of RTDM that operates on a tree produced by</span>\n<span class=\"s\">   enlive.\"</span>\n  <span class=\"p\">(</span><span class=\"ss\">:require</span> <span class=\"p\">[</span><span class=\"nv\">clj-http.client</span> <span class=\"ss\">:as</span> <span class=\"nv\">client</span><span class=\"p\">]</span>\n            <span class=\"p\">[</span><span class=\"nv\">net.cgrand.enlive-html</span> <span class=\"ss\">:as</span> <span class=\"nv\">html</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">init</span>\n  <span class=\"s\">\"Perform the correct initialization\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">m</span> <span class=\"nv\">n</span> <span class=\"nv\">c1</span> <span class=\"nv\">c2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">M</span> <span class=\"p\">(</span><span class=\"nb\">make-array </span><span class=\"nv\">Integer/TYPE</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">m</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">n</span><span class=\"p\">))]</span>\n    <span class=\"p\">(</span><span class=\"nf\">do</span>\n      <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">m</span><span class=\"p\">))</span>\n              <span class=\"nv\">j</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">n</span><span class=\"p\">))]</span>\n        <span class=\"p\">(</span><span class=\"nb\">aset </span><span class=\"nv\">M</span> <span class=\"nv\">i</span> <span class=\"nv\">j</span> <span class=\"p\">(</span><span class=\"nf\">int</span>\n                     <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">del-cost</span> <span class=\"nv\">c1</span><span class=\"p\">)</span>\n                        <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">ins-cost</span> <span class=\"nv\">c2</span><span class=\"p\">)))))</span>\n      <span class=\"nv\">M</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">load-tree</span>\n  <span class=\"s\">\"Fetches a link&#39;s content and builds an enlive-tree with it\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">a-link</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">a-link</span>\n       <span class=\"nv\">client/get</span>\n       <span class=\"ss\">:body</span>\n       <span class=\"nv\">java.io.StringReader.</span>\n       <span class=\"nv\">html/html-resource</span>\n       <span class=\"p\">(</span><span class=\"nb\">filter </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"ss\">:tag</span> <span class=\"nv\">x</span><span class=\"p\">)))</span> <span class=\"c1\">; pick out the tree and not the docstring</span>\n       <span class=\"nv\">first</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">tree-children</span>\n  <span class=\"p\">[</span><span class=\"nv\">a-tree</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">a-tree</span> <span class=\"ss\">:content</span> <span class=\"p\">(</span><span class=\"nb\">filter </span><span class=\"nv\">map?</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">num-children</span>\n  <span class=\"p\">[</span><span class=\"nv\">a-tree</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">a-tree</span> <span class=\"nv\">tree-children</span> <span class=\"nv\">count</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">tree-descendants</span>\n  <span class=\"p\">[</span><span class=\"nv\">a-tree</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">a-tree</span> <span class=\"nv\">tree-children</span> <span class=\"nv\">seq</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nf\">num-children</span> <span class=\"nv\">a-tree</span><span class=\"p\">)</span>\n       <span class=\"p\">(</span><span class=\"nb\">apply + </span><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">tree-descendants</span> <span class=\"p\">(</span><span class=\"nf\">tree-children</span> <span class=\"nv\">a-tree</span><span class=\"p\">))))</span>\n    <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">declare </span><span class=\"nv\">tree-edit-distance</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">invert-cost</span>\n  <span class=\"p\">[</span><span class=\"nv\">tree1</span> <span class=\"nv\">tree2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">t1-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">tree1</span><span class=\"p\">)</span>\n        <span class=\"nv\">t2-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">tree2</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">del-cost</span> <span class=\"nv\">t1-desc</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">ins-cost</span> <span class=\"nv\">t2-desc</span><span class=\"p\">))</span>\n       <span class=\"p\">(</span><span class=\"nf\">tree-edit-distance</span> <span class=\"nv\">tree1</span> <span class=\"nv\">tree2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">tree-edit-distance</span>\n  <span class=\"p\">[</span><span class=\"nv\">tree1</span> <span class=\"nv\">tree2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">m</span> <span class=\"p\">(</span><span class=\"nf\">num-children</span> <span class=\"nv\">tree1</span><span class=\"p\">)</span>\n        <span class=\"nv\">n</span> <span class=\"p\">(</span><span class=\"nf\">num-children</span> <span class=\"nv\">tree2</span><span class=\"p\">)</span>\n\n        <span class=\"nv\">t1-children</span> <span class=\"p\">(</span><span class=\"nf\">tree-children</span> <span class=\"nv\">tree1</span><span class=\"p\">)</span>\n        <span class=\"nv\">t2-children</span> <span class=\"p\">(</span><span class=\"nf\">tree-children</span> <span class=\"nv\">tree2</span><span class=\"p\">)</span>\n\n        <span class=\"nv\">t1-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">tree1</span><span class=\"p\">)</span>\n        <span class=\"nv\">t2-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">tree2</span><span class=\"p\">)</span>\n\n        <span class=\"nv\">M</span> <span class=\"p\">(</span><span class=\"nf\">init</span> <span class=\"nv\">m</span> <span class=\"nv\">n</span> <span class=\"nv\">t1-desc</span> <span class=\"nv\">t2-desc</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span><span class=\"p\">)]</span>\n    \n    <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"nv\">m</span><span class=\"p\">)</span>\n            <span class=\"nv\">j</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"nv\">n</span><span class=\"p\">)]</span> \n      <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">c-i</span> <span class=\"p\">(</span><span class=\"nb\">nth </span><span class=\"nv\">t1-children</span> <span class=\"nv\">i</span><span class=\"p\">)</span>\n            <span class=\"nv\">c-j</span> <span class=\"p\">(</span><span class=\"nb\">nth </span><span class=\"nv\">t2-children</span> <span class=\"nv\">j</span><span class=\"p\">)</span>\n\n            <span class=\"nv\">c-i-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">c-i</span><span class=\"p\">)</span>\n            <span class=\"nv\">c-j-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">c-j</span><span class=\"p\">)</span>\n\n            <span class=\"nv\">del</span> <span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">M</span> <span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">j</span><span class=\"p\">))</span>\n            <span class=\"nv\">ins</span> <span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">M</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">i</span><span class=\"p\">)</span> <span class=\"nv\">j</span><span class=\"p\">)</span>\n\n            <span class=\"nv\">sub-i</span> <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">M</span> <span class=\"nv\">i</span> <span class=\"nv\">j</span><span class=\"p\">)</span>\n                     <span class=\"nv\">del-cost</span>\n                     <span class=\"nv\">ins-cost</span><span class=\"p\">)</span>\n\n            <span class=\"nv\">sub</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">c-i</span> <span class=\"nv\">c-j</span><span class=\"p\">)</span>\n                  <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"nv\">sub-i</span>\n                     <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">ins-cost</span> <span class=\"nv\">c-j-desc</span><span class=\"p\">)</span>\n                     <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">del-cost</span> <span class=\"nv\">c-i-desc</span><span class=\"p\">))</span>\n                  <span class=\"p\">(</span><span class=\"nf\">cond</span>\n                   <span class=\"p\">(</span><span class=\"nb\">or </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">c-i</span> <span class=\"ss\">:content</span> <span class=\"p\">(</span><span class=\"nb\">filter </span><span class=\"nv\">map?</span><span class=\"p\">)))</span>\n                       <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">c-j</span> <span class=\"ss\">:content</span> <span class=\"p\">(</span><span class=\"nb\">filter </span><span class=\"nv\">map?</span><span class=\"p\">))))</span>\n                   <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">sub-i</span> <span class=\"nv\">sub-cost</span><span class=\"p\">)</span>\n\n                   <span class=\"p\">(</span><span class=\"nb\">or </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">c-i</span> <span class=\"ss\">:tag</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">c-j</span> <span class=\"ss\">:tag</span><span class=\"p\">)))</span>\n                   <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"nv\">sub-i</span> <span class=\"p\">(</span><span class=\"nf\">invert-cost</span> <span class=\"nv\">c-i</span> <span class=\"nv\">c-j</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">))</span>\n\n                   <span class=\"ss\">:else</span>\n                   <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">sub-i</span> <span class=\"nv\">sub-cost</span><span class=\"p\">)))]</span>\n        <span class=\"p\">(</span><span class=\"nb\">aset </span><span class=\"nv\">M</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">i</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">j</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">int </span><span class=\"p\">(</span><span class=\"nb\">min </span><span class=\"nv\">del</span> <span class=\"nv\">ins</span> <span class=\"nv\">sub</span><span class=\"p\">)))))</span>\n    <span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">M</span> <span class=\"nv\">m</span> <span class=\"nv\">n</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">tree-edit-distance-link</span>\n  <span class=\"s\">\"load trees and return their edit distance\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">link1</span> <span class=\"nv\">link2</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">t1</span> <span class=\"p\">(</span><span class=\"nf\">load-tree</span> <span class=\"nv\">link1</span><span class=\"p\">)</span>\n        <span class=\"nv\">t2</span> <span class=\"p\">(</span><span class=\"nf\">load-tree</span> <span class=\"nv\">link2</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"mi\">1</span>\n       <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nf\">tree-edit-distance</span> <span class=\"nv\">t1</span> <span class=\"nv\">t2</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">t1</span><span class=\"p\">)</span>\n             <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">t2</span><span class=\"p\">))))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This is now a convenient implementation that you can use. The full source code is in this <a href=\"https://github.com/shriphani/tree-edit-distance\">GitHub repo</a>.</p>")) ((p+ #"/Users/shriphani/blog/_src/posts/2013-12-03-tree-edit-distance-in-clojure.md" . unix) f post (u . "Tree Edit Distance in Clojure") (? . 40) 1388097182 (p+ #"/Users/shriphani/blog/2013/12/03/tree-edit-distance-in-clojure/index.html" . unix) "/2013/12/03/tree-edit-distance-in-clojure/" (u . "2013-12-03T00:58:47") (? . 20) (? . 39) (c (u . "research") c (u . "dom") c (u . "trees") c (u . "edit-distance") c (u . "dynamic-programming") c (u . "clojure")) (u . "\n<p>I had to throw together an implementation of tree-edit distance for clustering web-pages based on their structure. It performs reasonably quickly. The algorithm itself. The repo is <a href=\"https://github.com/shriphani/tree-edit-distance\">here</a>.</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">tree-edit-distance.core</span>\n  <span class=\"p\">(</span><span class=\"ss\">:use</span> <span class=\"p\">[</span><span class=\"nv\">clojure.pprint</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"ss\">:import</span> <span class=\"p\">(</span><span class=\"nf\">org.htmlcleaner</span> <span class=\"nv\">HtmlCleaner</span> <span class=\"nv\">DomSerializer</span> <span class=\"nv\">CleanerProperties</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nf\">org.w3c.dom</span> <span class=\"nv\">Document</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">init</span>\n  <span class=\"s\">\"Perform the correct initialization\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">m</span> <span class=\"nv\">n</span> <span class=\"nv\">c1</span> <span class=\"nv\">c2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">M</span> <span class=\"p\">(</span><span class=\"nb\">make-array </span><span class=\"nv\">Integer/TYPE</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">m</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">n</span><span class=\"p\">))]</span>\n    <span class=\"p\">(</span><span class=\"nf\">do</span>\n      <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">m</span><span class=\"p\">))</span>\n              <span class=\"nv\">j</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">n</span><span class=\"p\">))]</span>\n        <span class=\"p\">(</span><span class=\"nb\">aset </span><span class=\"nv\">M</span> <span class=\"nv\">i</span> <span class=\"nv\">j</span> <span class=\"p\">(</span><span class=\"nf\">int</span>\n                     <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">del-cost</span> <span class=\"nv\">c1</span><span class=\"p\">)</span>\n                        <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">ins-cost</span> <span class=\"nv\">c2</span><span class=\"p\">)))))</span>\n      <span class=\"nv\">M</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">num-children</span>\n  <span class=\"s\">\"Expects a html tree\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">a-tree</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">if</span><span class=\"p\">(</span><span class=\"nf\">.hasChildNodes</span> <span class=\"nv\">a-tree</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">.getLength</span> <span class=\"p\">(</span><span class=\"nf\">.getChildNodes</span> <span class=\"nv\">a-tree</span><span class=\"p\">))</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">tree-children</span>\n  <span class=\"s\">\"Return level 1 children\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">a-tree</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">n</span>  <span class=\"p\">(</span><span class=\"nf\">num-children</span> <span class=\"nv\">a-tree</span><span class=\"p\">)</span>\n        <span class=\"nv\">cs</span> <span class=\"p\">(</span><span class=\"nf\">.getChildNodes</span> <span class=\"nv\">a-tree</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nf\">map</span>\n     <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">.item</span> <span class=\"nv\">cs</span> <span class=\"nv\">%</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"nv\">n</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">tree-descendants</span>\n  <span class=\"p\">[</span><span class=\"nv\">a-tree</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nf\">.hasChildNodes</span> <span class=\"nv\">a-tree</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">concat </span><span class=\"p\">(</span><span class=\"nf\">tree-children</span> <span class=\"nv\">a-tree</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"nf\">flatten</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">tree-descendants</span> <span class=\"p\">(</span><span class=\"nf\">tree-children</span> <span class=\"nv\">a-tree</span><span class=\"p\">))))</span>\n    <span class=\"p\">[]))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">declare </span><span class=\"nv\">rtdm-edit-distance</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">invert-cost</span>\n  <span class=\"p\">[</span><span class=\"nv\">t1</span> <span class=\"nv\">t2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">t1-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">t1</span><span class=\"p\">)</span>\n        <span class=\"nv\">t2-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">t2</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">del-cost</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">t1-desc</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">ins-cost</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">t2-desc</span><span class=\"p\">)))</span>\n       <span class=\"p\">(</span><span class=\"nf\">rtdm-edit-distance</span> <span class=\"nv\">t1</span> <span class=\"nv\">t2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">rtdm-edit-distance</span>\n  <span class=\"s\">\"The RTDM algorithm for computing edit-distance.</span>\n<span class=\"s\">   The trees are assumed to be org.w3c.dom.Documents\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">tree-1</span> <span class=\"nv\">tree-2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">]</span>\n\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">m</span> <span class=\"p\">(</span><span class=\"nf\">num-children</span> <span class=\"nv\">tree-1</span><span class=\"p\">)</span>\n        <span class=\"nv\">n</span> <span class=\"p\">(</span><span class=\"nf\">num-children</span> <span class=\"nv\">tree-2</span><span class=\"p\">)</span>\n\n        <span class=\"nv\">t1-children</span> <span class=\"p\">(</span><span class=\"nf\">tree-children</span> <span class=\"nv\">tree-1</span><span class=\"p\">)</span>\n        <span class=\"nv\">t2-children</span> <span class=\"p\">(</span><span class=\"nf\">tree-children</span> <span class=\"nv\">tree-2</span><span class=\"p\">)</span>\n        \n        <span class=\"nv\">t1-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">tree-1</span><span class=\"p\">)</span>\n        <span class=\"nv\">t2-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">tree-2</span><span class=\"p\">)</span>\n\n        <span class=\"nv\">M</span> <span class=\"p\">(</span><span class=\"nf\">init</span> <span class=\"nv\">m</span> <span class=\"nv\">n</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">t1-desc</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">t2-desc</span><span class=\"p\">)</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span><span class=\"p\">)]</span>\n    \n    <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"nv\">m</span><span class=\"p\">)</span>\n            <span class=\"nv\">j</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"nv\">n</span><span class=\"p\">)]</span>\n      <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">c-i</span> <span class=\"p\">(</span><span class=\"nb\">nth </span><span class=\"nv\">t1-children</span> <span class=\"nv\">i</span><span class=\"p\">)</span>\n            <span class=\"nv\">c-j</span> <span class=\"p\">(</span><span class=\"nb\">nth </span><span class=\"nv\">t2-children</span> <span class=\"nv\">j</span><span class=\"p\">)</span>\n\n            <span class=\"nv\">c-i-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">c-i</span><span class=\"p\">)</span>\n            <span class=\"nv\">c-j-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">c-j</span><span class=\"p\">)</span>\n\n            <span class=\"nv\">del</span> <span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">M</span> <span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">j</span><span class=\"p\">))</span>\n            <span class=\"nv\">ins</span> <span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">M</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">i</span><span class=\"p\">)</span> <span class=\"nv\">j</span><span class=\"p\">)</span>\n\n            <span class=\"nv\">sub-i</span> <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">M</span> <span class=\"nv\">i</span> <span class=\"nv\">j</span><span class=\"p\">)</span>\n                     <span class=\"nv\">del-cost</span>\n                     <span class=\"nv\">ins-cost</span><span class=\"p\">)</span>\n\n            <span class=\"nv\">sub</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nf\">.isEqualNode</span> <span class=\"nv\">c-i</span> <span class=\"nv\">c-j</span><span class=\"p\">)</span>\n                  <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"nv\">sub-i</span>\n                     <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">ins-cost</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">c-j-desc</span><span class=\"p\">))</span>\n                     <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">del-cost</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">c-i-desc</span><span class=\"p\">)))</span>\n                  <span class=\"p\">(</span><span class=\"nf\">cond</span>\n                   <span class=\"p\">(</span><span class=\"nb\">or </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nf\">.hasChildNodes</span> <span class=\"nv\">c-i</span><span class=\"p\">))</span>\n                       <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nf\">.hasChildNodes</span> <span class=\"nv\">c-j</span><span class=\"p\">)))</span>\n                   <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">sub-i</span> <span class=\"nv\">sub-cost</span><span class=\"p\">)</span>\n\n                   <span class=\"p\">(</span><span class=\"nb\">and </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"nf\">.getNodeName</span> <span class=\"nv\">c-i</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">.getNodeName</span> <span class=\"nv\">c-j</span><span class=\"p\">))</span>\n                        <span class=\"p\">(</span><span class=\"nf\">try</span>\n                          <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"nf\">.getNodeValue</span> <span class=\"p\">(</span><span class=\"nf\">.getNamedItem</span> <span class=\"p\">(</span><span class=\"nf\">.getAttributes</span> <span class=\"nv\">c-i</span><span class=\"p\">)</span> <span class=\"s\">\"id\"</span><span class=\"p\">))</span>\n                             <span class=\"p\">(</span><span class=\"nf\">.getNodeValue</span> <span class=\"p\">(</span><span class=\"nf\">.getNamedItem</span> <span class=\"p\">(</span><span class=\"nf\">.getAttributes</span> <span class=\"nv\">c-j</span><span class=\"p\">)</span> <span class=\"s\">\"id\"</span><span class=\"p\">)))</span>\n                          <span class=\"p\">(</span><span class=\"nf\">catch</span> <span class=\"nv\">Exception</span> <span class=\"nv\">e</span> <span class=\"nv\">true</span><span class=\"p\">))</span>\n                        <span class=\"p\">(</span><span class=\"nf\">try</span>\n                          <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"nf\">.getNodeValue</span> <span class=\"p\">(</span><span class=\"nf\">.getNamedItem</span> <span class=\"p\">(</span><span class=\"nf\">.getAttributes</span> <span class=\"nv\">c-i</span><span class=\"p\">)</span> <span class=\"s\">\"class\"</span><span class=\"p\">))</span>\n                             <span class=\"p\">(</span><span class=\"nf\">.getNodeValue</span> <span class=\"p\">(</span><span class=\"nf\">.getNamedItem</span> <span class=\"p\">(</span><span class=\"nf\">.getAttributes</span> <span class=\"nv\">c-j</span><span class=\"p\">)</span> <span class=\"s\">\"class\"</span><span class=\"p\">)))</span>\n                          <span class=\"p\">(</span><span class=\"nf\">catch</span> <span class=\"nv\">Exception</span> <span class=\"nv\">e</span> <span class=\"nv\">true</span><span class=\"p\">)))</span>\n                   <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"nv\">sub-i</span> <span class=\"p\">(</span><span class=\"nf\">invert-cost</span> <span class=\"nv\">c-i</span> <span class=\"nv\">c-j</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">))</span>\n\n                   <span class=\"ss\">:else</span>\n                   <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">sub-i</span> <span class=\"nv\">sub-cost</span><span class=\"p\">)))]</span>\n        <span class=\"p\">(</span><span class=\"nb\">aset </span><span class=\"nv\">M</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">i</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">j</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">int </span><span class=\"p\">(</span><span class=\"nb\">min </span><span class=\"nv\">del</span> <span class=\"nv\">ins</span> <span class=\"nv\">sub</span><span class=\"p\">)))))</span>\n    <span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">M</span> <span class=\"nv\">m</span> <span class=\"nv\">n</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">rtdm-edit-distance-sim</span>\n  <span class=\"p\">[</span><span class=\"nv\">tree-1</span> <span class=\"nv\">tree-2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">t1-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">tree-1</span><span class=\"p\">)</span>\n        <span class=\"nv\">t2-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">tree-2</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"mi\">1</span>\n       <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nf\">rtdm-edit-distance</span> <span class=\"nv\">tree-1</span> <span class=\"nv\">tree-2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">t1-desc</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">del-cost</span><span class=\"p\">)</span>\n             <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">t2-desc</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">sub-cost</span><span class=\"p\">))))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">get-xml-tree-body</span>\n  <span class=\"s\">\"Downloads a webpage and converts it to an org.w3.dom.Document\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">page-src</span><span class=\"p\">]</span>\n  \n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">cleaner</span>        <span class=\"p\">(</span><span class=\"k\">new </span><span class=\"nv\">HtmlCleaner</span><span class=\"p\">)</span>\n        <span class=\"nv\">props</span>          <span class=\"p\">(</span><span class=\"nf\">.getProperties</span> <span class=\"nv\">cleaner</span><span class=\"p\">)</span>\n        <span class=\"nv\">cleaner-props</span>  <span class=\"p\">(</span><span class=\"k\">new </span><span class=\"nv\">CleanerProperties</span><span class=\"p\">)</span>\n        <span class=\"nv\">dom-serializer</span> <span class=\"p\">(</span><span class=\"k\">new </span><span class=\"nv\">DomSerializer</span> <span class=\"nv\">cleaner-props</span><span class=\"p\">)</span>\n        <span class=\"nv\">tag-node</span>       <span class=\"p\">(</span><span class=\"nf\">.clean</span> <span class=\"nv\">cleaner</span> <span class=\"nv\">page-src</span><span class=\"p\">)]</span>\n    \n    <span class=\"p\">(</span><span class=\"nf\">.createDOM</span> <span class=\"nv\">dom-serializer</span> <span class=\"nv\">tag-node</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">rtdm-edit-distance-html</span>\n  <span class=\"p\">[</span><span class=\"nv\">pg1</span> <span class=\"nv\">pg2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">rtdm-edit-distance-sim</span>\n   <span class=\"p\">(</span><span class=\"nf\">get-xml-tree-body</span> <span class=\"nv\">pg1</span><span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"nf\">get-xml-tree-body</span> <span class=\"nv\">pg2</span><span class=\"p\">)</span>\n   <span class=\"nv\">del-cost</span>\n   <span class=\"nv\">ins-cost</span>\n   <span class=\"nv\">sub-cost</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>") #t (u . "\n<p>I had to throw together an implementation of tree-edit distance for clustering web-pages based on their structure. It performs reasonably quickly. The algorithm itself. The repo is <a href=\"https://github.com/shriphani/tree-edit-distance\">here</a>.</p>\n\n<div class=\"brush: clojure\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">tree-edit-distance.core</span>\n  <span class=\"p\">(</span><span class=\"ss\">:use</span> <span class=\"p\">[</span><span class=\"nv\">clojure.pprint</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"ss\">:import</span> <span class=\"p\">(</span><span class=\"nf\">org.htmlcleaner</span> <span class=\"nv\">HtmlCleaner</span> <span class=\"nv\">DomSerializer</span> <span class=\"nv\">CleanerProperties</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"nf\">org.w3c.dom</span> <span class=\"nv\">Document</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">init</span>\n  <span class=\"s\">\"Perform the correct initialization\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">m</span> <span class=\"nv\">n</span> <span class=\"nv\">c1</span> <span class=\"nv\">c2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">M</span> <span class=\"p\">(</span><span class=\"nb\">make-array </span><span class=\"nv\">Integer/TYPE</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">m</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">n</span><span class=\"p\">))]</span>\n    <span class=\"p\">(</span><span class=\"nf\">do</span>\n      <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">m</span><span class=\"p\">))</span>\n              <span class=\"nv\">j</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">n</span><span class=\"p\">))]</span>\n        <span class=\"p\">(</span><span class=\"nb\">aset </span><span class=\"nv\">M</span> <span class=\"nv\">i</span> <span class=\"nv\">j</span> <span class=\"p\">(</span><span class=\"nf\">int</span>\n                     <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">del-cost</span> <span class=\"nv\">c1</span><span class=\"p\">)</span>\n                        <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">ins-cost</span> <span class=\"nv\">c2</span><span class=\"p\">)))))</span>\n      <span class=\"nv\">M</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">num-children</span>\n  <span class=\"s\">\"Expects a html tree\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">a-tree</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">if</span><span class=\"p\">(</span><span class=\"nf\">.hasChildNodes</span> <span class=\"nv\">a-tree</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">.getLength</span> <span class=\"p\">(</span><span class=\"nf\">.getChildNodes</span> <span class=\"nv\">a-tree</span><span class=\"p\">))</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">tree-children</span>\n  <span class=\"s\">\"Return level 1 children\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">a-tree</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">n</span>  <span class=\"p\">(</span><span class=\"nf\">num-children</span> <span class=\"nv\">a-tree</span><span class=\"p\">)</span>\n        <span class=\"nv\">cs</span> <span class=\"p\">(</span><span class=\"nf\">.getChildNodes</span> <span class=\"nv\">a-tree</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nf\">map</span>\n     <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">.item</span> <span class=\"nv\">cs</span> <span class=\"nv\">%</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"nv\">n</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">tree-descendants</span>\n  <span class=\"p\">[</span><span class=\"nv\">a-tree</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nf\">.hasChildNodes</span> <span class=\"nv\">a-tree</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">concat </span><span class=\"p\">(</span><span class=\"nf\">tree-children</span> <span class=\"nv\">a-tree</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"nf\">flatten</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">tree-descendants</span> <span class=\"p\">(</span><span class=\"nf\">tree-children</span> <span class=\"nv\">a-tree</span><span class=\"p\">))))</span>\n    <span class=\"p\">[]))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">declare </span><span class=\"nv\">rtdm-edit-distance</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">invert-cost</span>\n  <span class=\"p\">[</span><span class=\"nv\">t1</span> <span class=\"nv\">t2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">t1-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">t1</span><span class=\"p\">)</span>\n        <span class=\"nv\">t2-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">t2</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">del-cost</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">t1-desc</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">ins-cost</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">t2-desc</span><span class=\"p\">)))</span>\n       <span class=\"p\">(</span><span class=\"nf\">rtdm-edit-distance</span> <span class=\"nv\">t1</span> <span class=\"nv\">t2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">rtdm-edit-distance</span>\n  <span class=\"s\">\"The RTDM algorithm for computing edit-distance.</span>\n<span class=\"s\">   The trees are assumed to be org.w3c.dom.Documents\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">tree-1</span> <span class=\"nv\">tree-2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">]</span>\n\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">m</span> <span class=\"p\">(</span><span class=\"nf\">num-children</span> <span class=\"nv\">tree-1</span><span class=\"p\">)</span>\n        <span class=\"nv\">n</span> <span class=\"p\">(</span><span class=\"nf\">num-children</span> <span class=\"nv\">tree-2</span><span class=\"p\">)</span>\n\n        <span class=\"nv\">t1-children</span> <span class=\"p\">(</span><span class=\"nf\">tree-children</span> <span class=\"nv\">tree-1</span><span class=\"p\">)</span>\n        <span class=\"nv\">t2-children</span> <span class=\"p\">(</span><span class=\"nf\">tree-children</span> <span class=\"nv\">tree-2</span><span class=\"p\">)</span>\n        \n        <span class=\"nv\">t1-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">tree-1</span><span class=\"p\">)</span>\n        <span class=\"nv\">t2-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">tree-2</span><span class=\"p\">)</span>\n\n        <span class=\"nv\">M</span> <span class=\"p\">(</span><span class=\"nf\">init</span> <span class=\"nv\">m</span> <span class=\"nv\">n</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">t1-desc</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">t2-desc</span><span class=\"p\">)</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span><span class=\"p\">)]</span>\n    \n    <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"nv\">m</span><span class=\"p\">)</span>\n            <span class=\"nv\">j</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"nv\">n</span><span class=\"p\">)]</span>\n      <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">c-i</span> <span class=\"p\">(</span><span class=\"nb\">nth </span><span class=\"nv\">t1-children</span> <span class=\"nv\">i</span><span class=\"p\">)</span>\n            <span class=\"nv\">c-j</span> <span class=\"p\">(</span><span class=\"nb\">nth </span><span class=\"nv\">t2-children</span> <span class=\"nv\">j</span><span class=\"p\">)</span>\n\n            <span class=\"nv\">c-i-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">c-i</span><span class=\"p\">)</span>\n            <span class=\"nv\">c-j-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">c-j</span><span class=\"p\">)</span>\n\n            <span class=\"nv\">del</span> <span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">M</span> <span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">j</span><span class=\"p\">))</span>\n            <span class=\"nv\">ins</span> <span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">M</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">i</span><span class=\"p\">)</span> <span class=\"nv\">j</span><span class=\"p\">)</span>\n\n            <span class=\"nv\">sub-i</span> <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">M</span> <span class=\"nv\">i</span> <span class=\"nv\">j</span><span class=\"p\">)</span>\n                     <span class=\"nv\">del-cost</span>\n                     <span class=\"nv\">ins-cost</span><span class=\"p\">)</span>\n\n            <span class=\"nv\">sub</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nf\">.isEqualNode</span> <span class=\"nv\">c-i</span> <span class=\"nv\">c-j</span><span class=\"p\">)</span>\n                  <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"nv\">sub-i</span>\n                     <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">ins-cost</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">c-j-desc</span><span class=\"p\">))</span>\n                     <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">del-cost</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">c-i-desc</span><span class=\"p\">)))</span>\n                  <span class=\"p\">(</span><span class=\"nf\">cond</span>\n                   <span class=\"p\">(</span><span class=\"nb\">or </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nf\">.hasChildNodes</span> <span class=\"nv\">c-i</span><span class=\"p\">))</span>\n                       <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nf\">.hasChildNodes</span> <span class=\"nv\">c-j</span><span class=\"p\">)))</span>\n                   <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">sub-i</span> <span class=\"nv\">sub-cost</span><span class=\"p\">)</span>\n\n                   <span class=\"p\">(</span><span class=\"nb\">and </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"nf\">.getNodeName</span> <span class=\"nv\">c-i</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">.getNodeName</span> <span class=\"nv\">c-j</span><span class=\"p\">))</span>\n                        <span class=\"p\">(</span><span class=\"nf\">try</span>\n                          <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"nf\">.getNodeValue</span> <span class=\"p\">(</span><span class=\"nf\">.getNamedItem</span> <span class=\"p\">(</span><span class=\"nf\">.getAttributes</span> <span class=\"nv\">c-i</span><span class=\"p\">)</span> <span class=\"s\">\"id\"</span><span class=\"p\">))</span>\n                             <span class=\"p\">(</span><span class=\"nf\">.getNodeValue</span> <span class=\"p\">(</span><span class=\"nf\">.getNamedItem</span> <span class=\"p\">(</span><span class=\"nf\">.getAttributes</span> <span class=\"nv\">c-j</span><span class=\"p\">)</span> <span class=\"s\">\"id\"</span><span class=\"p\">)))</span>\n                          <span class=\"p\">(</span><span class=\"nf\">catch</span> <span class=\"nv\">Exception</span> <span class=\"nv\">e</span> <span class=\"nv\">true</span><span class=\"p\">))</span>\n                        <span class=\"p\">(</span><span class=\"nf\">try</span>\n                          <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"nf\">.getNodeValue</span> <span class=\"p\">(</span><span class=\"nf\">.getNamedItem</span> <span class=\"p\">(</span><span class=\"nf\">.getAttributes</span> <span class=\"nv\">c-i</span><span class=\"p\">)</span> <span class=\"s\">\"class\"</span><span class=\"p\">))</span>\n                             <span class=\"p\">(</span><span class=\"nf\">.getNodeValue</span> <span class=\"p\">(</span><span class=\"nf\">.getNamedItem</span> <span class=\"p\">(</span><span class=\"nf\">.getAttributes</span> <span class=\"nv\">c-j</span><span class=\"p\">)</span> <span class=\"s\">\"class\"</span><span class=\"p\">)))</span>\n                          <span class=\"p\">(</span><span class=\"nf\">catch</span> <span class=\"nv\">Exception</span> <span class=\"nv\">e</span> <span class=\"nv\">true</span><span class=\"p\">)))</span>\n                   <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"nv\">sub-i</span> <span class=\"p\">(</span><span class=\"nf\">invert-cost</span> <span class=\"nv\">c-i</span> <span class=\"nv\">c-j</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">))</span>\n\n                   <span class=\"ss\">:else</span>\n                   <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">sub-i</span> <span class=\"nv\">sub-cost</span><span class=\"p\">)))]</span>\n        <span class=\"p\">(</span><span class=\"nb\">aset </span><span class=\"nv\">M</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">i</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">j</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">int </span><span class=\"p\">(</span><span class=\"nb\">min </span><span class=\"nv\">del</span> <span class=\"nv\">ins</span> <span class=\"nv\">sub</span><span class=\"p\">)))))</span>\n    <span class=\"p\">(</span><span class=\"nb\">aget </span><span class=\"nv\">M</span> <span class=\"nv\">m</span> <span class=\"nv\">n</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">rtdm-edit-distance-sim</span>\n  <span class=\"p\">[</span><span class=\"nv\">tree-1</span> <span class=\"nv\">tree-2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">t1-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">tree-1</span><span class=\"p\">)</span>\n        <span class=\"nv\">t2-desc</span> <span class=\"p\">(</span><span class=\"nf\">tree-descendants</span> <span class=\"nv\">tree-2</span><span class=\"p\">)]</span>\n    <span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"mi\">1</span>\n       <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nf\">rtdm-edit-distance</span> <span class=\"nv\">tree-1</span> <span class=\"nv\">tree-2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">t1-desc</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">del-cost</span><span class=\"p\">)</span>\n             <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">t2-desc</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">sub-cost</span><span class=\"p\">))))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">get-xml-tree-body</span>\n  <span class=\"s\">\"Downloads a webpage and converts it to an org.w3.dom.Document\"</span>\n  <span class=\"p\">[</span><span class=\"nv\">page-src</span><span class=\"p\">]</span>\n  \n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">cleaner</span>        <span class=\"p\">(</span><span class=\"k\">new </span><span class=\"nv\">HtmlCleaner</span><span class=\"p\">)</span>\n        <span class=\"nv\">props</span>          <span class=\"p\">(</span><span class=\"nf\">.getProperties</span> <span class=\"nv\">cleaner</span><span class=\"p\">)</span>\n        <span class=\"nv\">cleaner-props</span>  <span class=\"p\">(</span><span class=\"k\">new </span><span class=\"nv\">CleanerProperties</span><span class=\"p\">)</span>\n        <span class=\"nv\">dom-serializer</span> <span class=\"p\">(</span><span class=\"k\">new </span><span class=\"nv\">DomSerializer</span> <span class=\"nv\">cleaner-props</span><span class=\"p\">)</span>\n        <span class=\"nv\">tag-node</span>       <span class=\"p\">(</span><span class=\"nf\">.clean</span> <span class=\"nv\">cleaner</span> <span class=\"nv\">page-src</span><span class=\"p\">)]</span>\n    \n    <span class=\"p\">(</span><span class=\"nf\">.createDOM</span> <span class=\"nv\">dom-serializer</span> <span class=\"nv\">tag-node</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">rtdm-edit-distance-html</span>\n  <span class=\"p\">[</span><span class=\"nv\">pg1</span> <span class=\"nv\">pg2</span> <span class=\"nv\">del-cost</span> <span class=\"nv\">ins-cost</span> <span class=\"nv\">sub-cost</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nf\">rtdm-edit-distance-sim</span>\n   <span class=\"p\">(</span><span class=\"nf\">get-xml-tree-body</span> <span class=\"nv\">pg1</span><span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"nf\">get-xml-tree-body</span> <span class=\"nv\">pg2</span><span class=\"p\">)</span>\n   <span class=\"nv\">del-cost</span>\n   <span class=\"nv\">ins-cost</span>\n   <span class=\"nv\">sub-cost</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n<!-- more-->")) ((? . 41) f post (u . "Enlive, Selectors, XPaths") (? . 41) 1411615337 (p+ #"/Users/shriphani/blog/2014/09/24/enlive-selectors-xpaths/index.html" . unix) "/2014/09/24/enlive-selectors-xpaths/" (u . "2014-09-24T20:47:20") (? . 17) #f (c (u . "clojure") c (u . "xpath") c (u . "enlive") c (u . "css") c (u . "css-selectors")) (u . "\n<p>Most of the HTML processing I have done has involved some form of fiddling with <a href=\"http://www.wikiwand.com/en/XPath\">XPath queries</a>. I have tried to move to <a href=\"https://github.com/cgrand/enlive\">EnLive</a> and put together these notes on how to execute an XPath query in EnLive.</p>") #t (u . "\n<p>Most of the HTML processing I have done has involved some form of fiddling with <a href=\"http://www.wikiwand.com/en/XPath\">XPath queries</a>. I have tried to move to <a href=\"https://github.com/cgrand/enlive\">EnLive</a> and put together these notes on how to execute an XPath query in EnLive.</p>\n<!-- more-->\n\n<h2 id=\"attribute-exists\">Attribute Exists?</h2>\n\n<pre><code>XPath        : name[@attribute]\nCSS-Selector : name[attribute]\nEnlive       : [:name (attr? :attribute)]</code></pre>\n\n<h2 id=\"attribute-value-exact-match\">Attribute Value Exact Match</h2>\n\n<pre><code>XPath        : name[@attribute=value]\nCSS-Selector : name[attribute=value]\nEnlive       : [:name (attr= :attribute value)]</code></pre>"))))